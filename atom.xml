<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  <subtitle>王若璠</subtitle>
  <link href="https://www.ffcchhgg.cn/atom.xml" rel="self"/>
  
  <link href="https://www.ffcchhgg.cn/"/>
  <updated>2025-02-04T06:27:05.426Z</updated>
  <id>https://www.ffcchhgg.cn/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>STLDay1</title>
    <link href="https://www.ffcchhgg.cn/2025/02/04/STLDay1/"/>
    <id>https://www.ffcchhgg.cn/2025/02/04/STLDay1/</id>
    <published>2025-02-04T03:33:20.000Z</published>
    <updated>2025-02-04T06:27:05.426Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># std::vector</span><br><span class="line"></span><br><span class="line">std::vector 容器的一个成员函数都有哪些，具体怎么使用</span><br><span class="line"></span><br><span class="line">简介：是一个动态数组，提供高效的随机访问和动态扩容功能。</span><br><span class="line"></span><br><span class="line">（内部使用连续的内存块存储元素，通过索引快速访问元素的时间复杂度为O(1)）（会自动管理内存，当元素数量超过当前容量时，会自动分配更大的内存块并复制元素）（支持迭代器，可方便地遍历容器中的元素）（泛型编程，是一个模板类，可存储任意类型的元素，如int ,double, std::string 等）</span><br><span class="line"></span><br><span class="line">```cpp</span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;vector&gt;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    // 初始化</span><br><span class="line">    std::vector&lt;int&gt; vec = &#123;1, 2, 3&#125;;</span><br><span class="line"></span><br><span class="line">    // 添加元素</span><br><span class="line">    vec.push_back(4);</span><br><span class="line">    vec.insert(vec.begin() + 2, 10);</span><br><span class="line"></span><br><span class="line">    // 删除元素</span><br><span class="line">    vec.pop_back(); //删除尾部元素</span><br><span class="line">    vec.erase(vec.begin() + 1); //删除第二个元素</span><br><span class="line"></span><br><span class="line">    // 访问元素</span><br><span class="line">    std::cout &lt;&lt; &quot;First element: &quot; &lt;&lt; vec.front() &lt;&lt; std::endl;</span><br><span class="line">    std::cout &lt;&lt; &quot;Last element: &quot; &lt;&lt; vec.back() &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    // 获取大小和容量</span><br><span class="line">    std::cout &lt;&lt; &quot;Size: &quot; &lt;&lt; vec.size() &lt;&lt; std::endl;</span><br><span class="line">    std::cout &lt;&lt; &quot;Capacity: &quot; &lt;&lt; vec.capacity() &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    // 遍历元素</span><br><span class="line">    std::cout &lt;&lt; &quot;Elements: &quot;;</span><br><span class="line">    for (int i : vec) &#123;</span><br><span class="line">        std::cout &lt;&lt; i &lt;&lt; &quot; &quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    std::cout &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="范围-based-for-循环"><a href="#范围-based-for-循环" class="headerlink" title="范围-based for 循环"></a>范围-based for 循环</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (元素类型 变量名 : 容器) &#123;</span><br><span class="line">    <span class="comment">// 使用变量名访问元素</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font color=red><strong>注：</strong></font><br>·范围-based for 循环不仅适用于 std::vector，还适用于其他 STL 容器（如 std::list、std::map 等）以及数组。<br>·代码块的结束必须在新的一行使用三个反引号，而且前后不能有多余的空格或其他字符，只需要简单地写 ‘ &#96;&#96;&#96; ’。<br>·默认情况下，范围-based for 循环是只读的。如果需要修改容器中的元素，需要使用引用：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span>&amp; i : vec) &#123;</span><br><span class="line">    i *= <span class="number">2</span>; <span class="comment">// 修改元素</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#<span class="meta"># vector.front()  &amp;  vector.back()</span></span><br><span class="line"></span><br><span class="line">&gt; （成员函数）**返回第一个 / 最后一个元素**的引用，使你能够访问和修改它。</span><br><span class="line">&gt; </span><br><span class="line"></span><br><span class="line">**语法：**</span><br><span class="line"></span><br><span class="line">```<span class="function">cpp</span></span><br><span class="line"><span class="function">reference <span class="title">front</span><span class="params">()</span></span>; <span class="comment">// reference back();</span></span><br><span class="line"><span class="function">const_reference <span class="title">front</span><span class="params">()</span> <span class="type">const</span></span>; <span class="comment">// const_reference back() const;</span></span><br></pre></td></tr></table></figure><ul><li><strong>返回类型</strong>：<ul><li>如果 <code>vec</code> 是非 <code>const</code> 容器，<code>front()</code> 返回对第一个元素的 <strong>引用</strong>，类型为 <code>reference</code>。</li><li>如果 <code>vec</code> 是 <code>const</code> 容器，<code>front()</code> 返回对第一个元素的 <strong>常量引用</strong>，类型为 <code>const_reference</code></li></ul></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::vector&lt;<span class="type">int</span>&gt; vec = &#123;<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 访问第一个元素</span></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;The first element is: &quot;</span> &lt;&lt; vec.<span class="built_in">front</span>() &lt;&lt; std::endl;  <span class="comment">// 输出: 10</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 修改第一个元素</span></span><br><span class="line">    vec.<span class="built_in">front</span>() = <span class="number">100</span>;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;After modification, the first element is: &quot;</span> &lt;&lt; vec.<span class="built_in">front</span>() &lt;&lt; std::endl;  <span class="comment">// 输出: 100</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>back()同理</em></p><h2 id="vector-push-back"><a href="#vector-push-back" class="headerlink" title="vector.push_back()"></a>vector.push_back()</h2><blockquote><p>（成员函数）将一个元素添加到容器末尾</p></blockquote><p><strong>语法：</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">push_back</span><span class="params">(<span class="type">const</span> T&amp; value)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">push_back</span><span class="params">(T&amp;&amp; value)</span></span>;</span><br></pre></td></tr></table></figure><ul><li><code>push_back(const T&amp; value)</code>：将一个值为 <code>value</code> 的元素添加到 <code>std::vector</code> 的末尾。<code>value</code> 是一个常量引用，可以是 <code>std::vector</code> 中存储的类型的任何对象。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//添加单个元素</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::vector&lt;<span class="type">int</span>&gt; vec = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;  <span class="comment">// 初始包含三个元素</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加一个元素 4 到 vec 的末尾</span></span><br><span class="line">    vec.<span class="built_in">push_back</span>(<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输出修改后的 vec</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i : vec) &#123;</span><br><span class="line">        std::cout &lt;&lt; i &lt;&lt; <span class="string">&quot; &quot;</span>;  <span class="comment">// 输出: 1 2 3 4</span></span><br><span class="line">    &#125;</span><br><span class="line">    std::cout &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>push_back(T&amp;&amp; value)</code>：通过右值引用将一个临时对象（或可移动对象）添加到容器末尾，这样可以避免不必要的拷贝，提高效率</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用右值引用优化</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::vector&lt;<span class="type">int</span>&gt; vec;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用右值引用插入临时对象</span></span><br><span class="line">    vec.<span class="built_in">push_back</span>(<span class="number">10</span>);  <span class="comment">// 这里的 10 是一个临时对象</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输出修改后的 vec</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i : vec) &#123;</span><br><span class="line">        std::cout &lt;&lt; i &lt;&lt; <span class="string">&quot; &quot;</span>;  <span class="comment">// 输出: 10</span></span><br><span class="line">    &#125;</span><br><span class="line">    std::cout &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//在这个例子中，10 是一个右值，调用 push_back 时，使用的是右值引用，因此元素 10 被直接移动到容器末尾，避免了不必要的拷贝。</span></span><br></pre></td></tr></table></figure><h2 id="vector-pop-back"><a href="#vector-pop-back" class="headerlink" title="vector.pop_back()"></a>vector.pop_back()</h2><blockquote><p>（成员函数）用于删除末尾元素</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::vector&lt;<span class="type">int</span>&gt; vec = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;;</span><br><span class="line">    <span class="comment">// 删除末尾的元素</span></span><br><span class="line">    vec.<span class="built_in">pop_back</span>();</span><br><span class="line">    <span class="comment">// 输出修改后的 vec</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i : vec) &#123;</span><br><span class="line">        std::cout &lt;&lt; i &lt;&lt; <span class="string">&quot; &quot;</span>;  <span class="comment">// 输出: 1 2 3</span></span><br><span class="line">    &#125;</span><br><span class="line">    std::cout &lt;&lt; std::endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="vector-insert"><a href="#vector-insert" class="headerlink" title="vector.insert"></a>vector.insert</h2><blockquote><p>（成员函数）用于在指定位置插入一个或多个元素，作用是将新元素插入到容器的指定位置，并将原有元素向后移动，以腾出空间。</p></blockquote><p><strong>语法：</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">iterator <span class="title">insert</span><span class="params">(iterator pos, <span class="type">const</span> T&amp; value)</span></span>;<span class="comment">//插入单个元素</span></span><br><span class="line"><span class="function">iterator <span class="title">insert</span><span class="params">(iterator pos, T&amp;&amp; value)</span></span>;</span><br><span class="line"><span class="function">iterator <span class="title">insert</span><span class="params">(iterator pos, size_type count, <span class="type">const</span> T&amp; value)</span></span>;<span class="comment">//插入多个相同的元素</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">InputIterator</span>&gt;</span><br><span class="line"><span class="function">iterator <span class="title">insert</span><span class="params">(iterator pos, InputIterator first, InputIterator last)</span></span>;<span class="comment">//插入一个范围的元素</span></span><br></pre></td></tr></table></figure><h3 id="1-insert-iterator-pos-const-T-value-插入单个元素"><a href="#1-insert-iterator-pos-const-T-value-插入单个元素" class="headerlink" title="1. insert(iterator pos, const T&amp; value)  插入单个元素"></a>1. <strong><code>insert(iterator pos, const T&amp; value)</code></strong>  插入单个元素</h3><ul><li>在指定位置 <code>pos</code> 插入单个元素 <code>value</code>。</li><li><code>pos</code> 是一个指向容器中某个位置的迭代器。</li><li>该方法返回一个迭代器，指向新插入的元素。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::vector&lt;<span class="type">int</span>&gt; vec = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在索引 2 处插入元素 10</span></span><br><span class="line">    <span class="keyword">auto</span> it = vec.<span class="built_in">insert</span>(vec.<span class="built_in">begin</span>() + <span class="number">2</span>, <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输出修改后的 vec</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i : vec) &#123;</span><br><span class="line">        std::cout &lt;&lt; i &lt;&lt; <span class="string">&quot; &quot;</span>;  <span class="comment">// 输出: 1 2 10 3 4</span></span><br><span class="line">    &#125;</span><br><span class="line">    std::cout &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输出新插入元素的值</span></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Inserted element: &quot;</span> &lt;&lt; *it &lt;&lt; std::endl;  <span class="comment">// 输出: 10</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-insert-iterator-pos-T-value"><a href="#2-insert-iterator-pos-T-value" class="headerlink" title="2. insert(iterator pos, T&amp;&amp; value)"></a>2. <strong><code>insert(iterator pos, T&amp;&amp; value)</code></strong></h3><ul><li>这个版本与第一个类似，但是它允许传递一个右值引用（<code>T&amp;&amp;</code>），适用于插入可以被移动的对象。</li></ul><h3 id="3-insert-iterator-pos-size-type-count-const-T-value-插入多个相同的元素"><a href="#3-insert-iterator-pos-size-type-count-const-T-value-插入多个相同的元素" class="headerlink" title="3. insert(iterator pos, size_type count, const T&amp; value)  插入多个相同的元素"></a>3. <strong><code>insert(iterator pos, size_type count, const T&amp; value)</code></strong>  插入多个相同的元素</h3><ul><li>在指定位置 <code>pos</code> 插入 <code>count</code> 个值为 <code>value</code> 的元素。</li><li>如果你希望插入多个相同的元素，可以使用这个版本。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::vector&lt;<span class="type">int</span>&gt; vec = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在索引 2 处插入 3 个值为 10 的元素</span></span><br><span class="line">    vec.<span class="built_in">insert</span>(vec.<span class="built_in">begin</span>() + <span class="number">2</span>, <span class="number">3</span>, <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输出修改后的 vec</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i : vec) &#123;</span><br><span class="line">        std::cout &lt;&lt; i &lt;&lt; <span class="string">&quot; &quot;</span>;  <span class="comment">// 输出: 1 2 10 10 10 3 4</span></span><br><span class="line">    &#125;</span><br><span class="line">    std::cout &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-insert-iterator-pos-InputIterator-first-InputIterator-last-插入一个范围的元素"><a href="#4-insert-iterator-pos-InputIterator-first-InputIterator-last-插入一个范围的元素" class="headerlink" title="4. insert(iterator pos, InputIterator first, InputIterator last)  插入一个范围的元素"></a>4. <strong><code>insert(iterator pos, InputIterator first, InputIterator last)</code>  插入一个范围的元素</strong></h3><ul><li>在指定位置 <code>pos</code> 插入一个范围 <code>[first, last)</code> 中的所有元素。</li><li>这可以用来将一个容器或其他可迭代范围的元素插入到当前容器中</li></ul><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::vector&lt;<span class="type">int</span>&gt; vec = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;;</span><br><span class="line">    std::vector&lt;<span class="type">int</span>&gt; new_elements = &#123;<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在索引 2 处插入 new_elements 的所有元素</span></span><br><span class="line">    vec.<span class="built_in">insert</span>(vec.<span class="built_in">begin</span>() + <span class="number">2</span>, new_elements.<span class="built_in">begin</span>(), new_elements.<span class="built_in">end</span>());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输出修改后的 vec</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i : vec) &#123;</span><br><span class="line">        std::cout &lt;&lt; i &lt;&lt; <span class="string">&quot; &quot;</span>;  <span class="comment">// 输出: 1 2 5 6 7 3 4</span></span><br><span class="line">    &#125;</span><br><span class="line">    std::cout &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注：</strong><br>&amp;<code>vec.begin()</code> 返回一个指向 <code>vec</code> 第一个元素的迭代器。通过 <code>+ 2</code> 操作，<code>vec.begin() + 2</code> 将返回一个指向容器中第 3 个元素的迭代器（因为迭代器是从 0 开始的）。换句话说，它指向了容器的第三个位置。<br>&amp;<code>*it</code> 是 <strong>解引用操作符</strong>，它用于访问迭代器 <code>it</code> 指向的元素。换句话说，<code>*it</code> 返回 <code>it</code> 所指向位置的值。</p><p><strong>注：</strong><br>返回值：<strong>返回迭代器，</strong><code>insert</code> 返回一个迭代器，指向新插入的元素（对于插入<strong>单个元素</strong>的情况）。如果插入了<strong>多个元素</strong>，则指向插入区域中的第一个元素。</p><h2 id="vec-erase"><a href="#vec-erase" class="headerlink" title="vec.erase"></a>vec.erase</h2><blockquote><p>（成员函数）用于删除容器中一个或多个元素</p></blockquote><p><strong>语法：</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">iterator <span class="title">erase</span><span class="params">(iterator position)</span></span>;</span><br><span class="line"><span class="function">iterator <span class="title">erase</span><span class="params">(iterator first, iterator last)</span></span>;</span><br></pre></td></tr></table></figure><h3 id="1-iterator-erase-iterator-position-："><a href="#1-iterator-erase-iterator-position-：" class="headerlink" title="1.iterator erase(iterator position)："></a>1.<code>iterator erase(iterator position)</code>：</h3><ul><li>删除容器中指定位置的单个元素。</li><li><code>position</code> 是一个指向要删除元素的迭代器。</li><li>返回值是指向删除元素后容器中下一个元素的迭代器。如果删除的是容器的最后一个元素，则返回 <code>vec.end()</code>。</li></ul><h3 id="2-iterator-erase-iterator-first-iterator-last-："><a href="#2-iterator-erase-iterator-first-iterator-last-：" class="headerlink" title="2.iterator erase(iterator first, iterator last)："></a>2.<code>iterator erase(iterator first, iterator last)</code>：</h3><ul><li>删除容器中从 <code>first</code> 到 <code>last</code> 之间的多个元素（<code>first</code> 包含，<code>last</code> 不包含）。</li><li><code>first</code> 和 <code>last</code> 是迭代器，分别指向要删除元素的起始位置和结束位置。</li><li>返回值是指向删除范围之后第一个元素的迭代器。如果删除的是容器的最后一部分，返回 <code>vec.end()</code>。</li></ul><h2 id="vector-size-vector-capacity"><a href="#vector-size-vector-capacity" class="headerlink" title="vector.size()&amp;vector.capacity()"></a>vector.size()&amp;vector.capacity()</h2><blockquote><p>（均为成员函数）size返回容器当前包含的<strong>元素个数</strong>（容器的大小）；capacity返回容器能够容纳的元素的总容量（已经分配的内存空间中可以存储的元素数量，不是当前实际的元素数量）</p></blockquote><p><code>std::vector</code> 是一个动态数组，当元素数量超过当前容量时，它会自动扩容。扩容的过程包括：</p><ol><li>分配一块更大的内存（通常是当前容量的 <strong>2 倍</strong>）。</li><li>将原有元素复制到新内存中。</li><li>释放旧内存。</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span c</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>使用gdb调试代码</title>
    <link href="https://www.ffcchhgg.cn/2025/01/27/%E4%BD%BF%E7%94%A8gdb%E8%B0%83%E8%AF%95%E4%BB%A3%E7%A0%81/"/>
    <id>https://www.ffcchhgg.cn/2025/01/27/%E4%BD%BF%E7%94%A8gdb%E8%B0%83%E8%AF%95%E4%BB%A3%E7%A0%81/</id>
    <published>2025-01-27T09:33:10.000Z</published>
    <updated>2025-01-30T03:58:06.988Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>首先加入调试信息：<code>g++ -g -o pp pp.cpp</code></p></li><li><p>启动gdb</p><p>1)在文件内部的终端内输入  <code>gdb</code></p><p>2)或者在win+R+回车后找到文件所在目录 (或者在Git Bash中)并输入    <code>gdb ./文件名</code></p></li><li><p>设置断点</p><p>1)在某一行设置断点：    <font color=red><strong><code>(gdb) break 15</code></strong></font>       <em>在第 15 行设置断点</em></p><p>2)在函数入口设置断点：    <code>(gdb) break my_function</code>     <em>在函数 my_function 的入口设置断点</em></p></li><li><p>在gdb中启动程序：</p><p>1)代码无参数： <code>(gdb) run</code>  </p><p>2)代码有参数： <code>(gdb) run  avg1 avg2…</code>（只需要在run后面增加参数的值即可）</p></li><li><p>执行代码</p><p>1)<code>(gdb)next</code>:  单步执行，跳过函数调用</p><p>2)<code>(gdb)step</code>:   单步执行，进入函数</p><p>3)<code>(gdb)continue</code>:  继续执行直到下一个断点</p></li><li><p>查看变量的值：<code>(gdb)print &lt;变量名&gt;</code></p></li><li><p>查看当前调用栈：<code>(gdb)backtrace</code> 或 <code>(gdb)bt</code></p></li><li><p>修改变量的值：<code>(gdb)set &lt;variable_name&gt; = &lt;new_value&gt;</code></p></li><li><p>退出 GDB：<code>(gdb)quit</code></p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;ol&gt;
&lt;li&gt;&lt;p&gt;首先加入调试信息：&lt;code&gt;g++ -g -o pp pp.cpp&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;启动gdb&lt;/p&gt;
&lt;p&gt;1)在文件内部的终端内输入  &lt;code&gt;gdb&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;2)或者在win+R+回车后找到文</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>another try</title>
    <link href="https://www.ffcchhgg.cn/2024/12/28/another-try/"/>
    <id>https://www.ffcchhgg.cn/2024/12/28/another-try/</id>
    <published>2024-12-28T02:32:26.191Z</published>
    <updated>2025-01-14T04:24:53.248Z</updated>
    
    <content type="html"><![CDATA[<h1 id="记录我的开始"><a href="#记录我的开始" class="headerlink" title="记录我的开始"></a>记录我的开始</h1><h2 id="Betelgeuse"><a href="#Betelgeuse" class="headerlink" title="Betelgeuse"></a>Betelgeuse</h2><p><img src="https://5b0988e595225.cdn.sohucs.com/images/20191129/7afb5e4750c74803adb1494631e1e97d.gif" alt="开心呀"></p><p>虽然我学习新的东西很慢，但是当我克服各种困难（虽然偶尔只是误打误撞做对了某些步骤）时，我内心其实也是十分激动的，这是我<strong>技术博客的开始</strong>，虽然还有大工程没有建好 *(metlify一直注册不了，想ku，呜呜呜)*，但是已经<strong>初见雏形</strong>了，过程中更多的是好奇，做出来也是很兴奋（两点肝完，三点睡着），希望未来几年或十几年都能<font color=red><strong>坚持</strong></font>下来吧，<mark><strong>加油加油，你是最棒哒！！</strong><mark><br><img src="https://ts1.cn.mm.bing.net/th/id/R-C.624ca71e95353d938d0fe22e9e6ca57b?rik=TPo6jiNZUDMflA&riu=http://img.soogif.com/BmdwKEAuS7Y32eR9WKeNRzLJyWKpMU7T.gif&ehk=uGtwEZjWXjxH9cWHIRdztyOZ5Knf4LTZ2IAnjYMsOZI=&risl=&pid=ImgRaw&r=0"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;记录我的开始&quot;&gt;&lt;a href=&quot;#记录我的开始&quot; class=&quot;headerlink&quot; title=&quot;记录我的开始&quot;&gt;&lt;/a&gt;记录我的开始&lt;/h1&gt;&lt;h2 id=&quot;Betelgeuse&quot;&gt;&lt;a href=&quot;#Betelgeuse&quot; class=&quot;headerli</summary>
      
    
    
    
    
    <category term="Daily" scheme="https://www.ffcchhgg.cn/tags/Daily/"/>
    
  </entry>
  
  <entry>
    <title>b</title>
    <link href="https://www.ffcchhgg.cn/2024/12/28/b/"/>
    <id>https://www.ffcchhgg.cn/2024/12/28/b/</id>
    <published>2024-12-27T17:48:31.000Z</published>
    <updated>2024-12-30T05:38:24.033Z</updated>
    
    <content type="html"><![CDATA[<h2 id="好困啊"><a href="#好困啊" class="headerlink" title="好困啊"></a>好困啊</h2><h1 id="明天要开始复习考试内容啦！！！"><a href="#明天要开始复习考试内容啦！！！" class="headerlink" title="明天要开始复习考试内容啦！！！"></a>明天要开始复习考试内容啦！！！</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">加油，你是最棒的！！！</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;好困啊&quot;&gt;&lt;a href=&quot;#好困啊&quot; class=&quot;headerlink&quot; title=&quot;好困啊&quot;&gt;&lt;/a&gt;好困啊&lt;/h2&gt;&lt;h1 id=&quot;明天要开始复习考试内容啦！！！&quot;&gt;&lt;a href=&quot;#明天要开始复习考试内容啦！！！&quot; class=&quot;headerlink</summary>
      
    
    
    
    
    <category term="Daily" scheme="https://www.ffcchhgg.cn/tags/Daily/"/>
    
  </entry>
  
  <entry>
    <title>a</title>
    <link href="https://www.ffcchhgg.cn/2024/12/28/a/"/>
    <id>https://www.ffcchhgg.cn/2024/12/28/a/</id>
    <published>2024-12-27T17:10:13.000Z</published>
    <updated>2024-12-30T05:38:11.476Z</updated>
    
    <content type="html"><![CDATA[<h2 id="哇哦"><a href="#哇哦" class="headerlink" title="哇哦"></a>哇哦</h2><h3 id="这是王若璠的小小探索"><a href="#这是王若璠的小小探索" class="headerlink" title="这是王若璠的小小探索"></a>这是王若璠的小小探索</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">* 自己鼓捣了一天的成果 *</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;哇哦&quot;&gt;&lt;a href=&quot;#哇哦&quot; class=&quot;headerlink&quot; title=&quot;哇哦&quot;&gt;&lt;/a&gt;哇哦&lt;/h2&gt;&lt;h3 id=&quot;这是王若璠的小小探索&quot;&gt;&lt;a href=&quot;#这是王若璠的小小探索&quot; class=&quot;headerlink&quot; title=&quot;这是王若璠</summary>
      
    
    
    
    
    <category term="Daily" scheme="https://www.ffcchhgg.cn/tags/Daily/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://www.ffcchhgg.cn/2024/12/27/hello-world/"/>
    <id>https://www.ffcchhgg.cn/2024/12/27/hello-world/</id>
    <published>2024-12-27T12:16:12.461Z</published>
    <updated>2024-12-27T12:16:12.461Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
