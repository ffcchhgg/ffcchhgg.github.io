<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  <subtitle>王若璠</subtitle>
  <link href="https://www.ffcchhgg.cn/atom.xml" rel="self"/>
  
  <link href="https://www.ffcchhgg.cn/"/>
  <updated>2025-04-05T16:58:28.112Z</updated>
  <id>https://www.ffcchhgg.cn/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>数据科学工具链（numpy,pandas）</title>
    <link href="https://www.ffcchhgg.cn/2025/04/06/%E6%95%B0%E6%8D%AE%E7%A7%91%E5%AD%A6%E5%B7%A5%E5%85%B7%E9%93%BE%EF%BC%88numpy-pandas%EF%BC%89/"/>
    <id>https://www.ffcchhgg.cn/2025/04/06/%E6%95%B0%E6%8D%AE%E7%A7%91%E5%AD%A6%E5%B7%A5%E5%85%B7%E9%93%BE%EF%BC%88numpy-pandas%EF%BC%89/</id>
    <published>2025-04-05T16:43:24.000Z</published>
    <updated>2025-04-05T16:58:28.112Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>上次在安装numpy和pandas过程中出现了各种各样的困难，到最后发现可能是自己安装了好几个python而且不在同一个盘导致调用错误，安装的时候发生了混乱，今天接着上次继续学习。</p><p>下面这个链接是我和ChatGPT的聊天对话。</p><p>   ⭐       <a href="https://chatgpt.com/share/67f14d8b-62b4-8002-a8dd-a2a2e8710c39">https://chatgpt.com/share/67f14d8b-62b4-8002-a8dd-a2a2e8710c39</a></p><p>首先我在cmd输入<strong>where python</strong>查到了我电脑中所有的python，如下：</p><p><img src="/imgff/8.png"></p><p>前三个大概是我自己安装的，第四个就是在APPs里面的应该是电脑自带的，其中E盘的Anaconda是一个开源的 Python 发行版（专注于数据科学、机器学习和科学计算。它集成了常用的数据科学工具包，并提供强大的环境管理功能。）（应该可以当作一个加强版的python）（前段时间刚刚安装的）</p><p><img src="/imgff/9.png"></p><p>ChatGPT给我的建议：</p><p><img src="/imgff/10.png"></p><h2 id="对于这么几个python我该如何随意调用（针对进入某个具体版本的python运行代码，如何创建进入虚拟环境待会介绍）呢？"><a href="#对于这么几个python我该如何随意调用（针对进入某个具体版本的python运行代码，如何创建进入虚拟环境待会介绍）呢？" class="headerlink" title="对于这么几个python我该如何随意调用（针对进入某个具体版本的python运行代码，如何创建进入虚拟环境待会介绍）呢？"></a>对于这么几个python我该如何随意调用（针对进入某个具体版本的python运行代码，如何创建进入虚拟环境待会介绍）呢？</h2><p>在终端，如在cmd中，可以直接输入你想使用的版本的python所在文件位置。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 打开cmd然后运行</span></span><br><span class="line">C:\Python313\python.exe</span><br></pre></td></tr></table></figure><p>如果看到类似以下界面就是进入了该python环境中</p><p><img src="/imgff/11.png"></p><p> 如果想在某个python环境下安装某个第三方库（如pandas），可以跑：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\Python313\python.exe -m pip install pandas</span><br></pre></td></tr></table></figure><p>如果你想查看某个python环境下面是否安装了某个库，可以跑：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;python路径&gt; -m pip show pandas</span><br></pre></td></tr></table></figure><p>看到类似下面这个界面就说明已经安装了</p><p><img src="/imgff/12.png"></p><p> 如果输出为空或者提示：WARNING: Package(s) not found: pandas则说明没有安装。</p><p>基于上次某些资料让我修改第三方库的默认安装路径，我想了解以下：</p><h2 id="如何修改Python-安装第三方包（如-pandas）的默认安装位置呢？"><a href="#如何修改Python-安装第三方包（如-pandas）的默认安装位置呢？" class="headerlink" title="如何修改Python 安装第三方包（如 pandas）的默认安装位置呢？"></a>如何修改Python 安装第三方包（如 <code>pandas</code>）的<strong>默认安装位置呢？</strong></h2><p>GPT给了我多种方法，如下（具体操作可以参考聊天对话）</p><p><img src="/imgff/13.png"></p><p>我准备采用它强烈推荐的创建虚拟环境这一个方法。（它说是“是最推荐的现代做法！干净、隔离、不会乱装包，适合你未来做多个项目、玩 AI 或科学计算。”）</p><h2 id="创建虚拟环境"><a href="#创建虚拟环境" class="headerlink" title="创建虚拟环境"></a>创建虚拟环境</h2><p>首先简单介绍一下虚拟环境的作用：<strong>为每个项目创建一个“独立”的 Python 包环境</strong>，互不干扰，像“沙盒”一样。默认安装包的路径也就只在这个环境里。</p><p>今天了解到的有两种方式（不知道是不是还有其他方法），实际操作了一种。（实际上另一种前段时间学习安装pytorch框架的时候就已经实操过了，因为看到之前科研启蒙项目论文的项目的python环境是虚拟环境。但是当时只是跟着教程一步步傻瓜式操作，不知道自己创建了虚拟环境。）</p><p>下面开始介绍使用<strong>venv</strong>创建虚拟环境的操作。</p><h3 id="具体操作流程（venv）"><a href="#具体操作流程（venv）" class="headerlink" title="具体操作流程（venv）"></a>具体操作流程（venv）</h3><p>假设我想在<code>D:\MyProjects\AIProject</code>下创建一个虚拟环境</p><p><strong>步骤一：打开命令行终端（cmd&#x2F;PowerShell）（我使用的是cmd）</strong></p><p><code>Win + R</code> → 输入 <code>cmd</code> → 回车</p><p><strong>步骤二：进入项目目录</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> D:</span><br><span class="line"><span class="built_in">cd</span> MyProjects\AIProject</span><br></pre></td></tr></table></figure><p><strong>步骤三：用指定的python创建虚拟环境</strong></p><p>从你现有的几个python中选择，如想要使用<code>C:\Python313\python.exe</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\Python313\python.exe -m venv venv</span><br></pre></td></tr></table></figure><p>这会在当前目录下创建一个名为 <code>venv</code> 的虚拟环境文件夹。</p><p><strong>步骤四：激活虚拟环境</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">venv\Scripts\activate</span><br></pre></td></tr></table></figure><p>激活后会看到命令提示符前多了一个 <code>(venv)</code>：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(venv) D:\MyProjects\AIProject&gt;</span><br></pre></td></tr></table></figure><p>✅ 说明你现在已经进入了这个独立环境。</p><p><strong>步骤五：在虚拟环境中安装包</strong></p><p>比如，如果想要安装pandas包，可以输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pandas</span><br></pre></td></tr></table></figure><p>🔍 安装包会被放在：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">D:\MyProjects\AIProject\venv\Lib\site-packages\</span><br></pre></td></tr></table></figure><p>不会影响你电脑上的其他 Python 环境！</p><p><strong>步骤六：运行你的程序</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python myscript.py</span><br></pre></td></tr></table></figure><p>运行的是虚拟环境里的 Python 和包。</p><p><strong>步骤七：退出虚拟环境</strong></p><p>当你用完这个环境时，输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">deactivate</span><br></pre></td></tr></table></figure><p>命令行提示符就会变回原来的，没有 <code>(venv)</code>。</p><h3 id="Questions"><a href="#Questions" class="headerlink" title="Questions"></a>Questions</h3><p>❓<strong>如果我在 C:\Python313 里已经安装了 pandas，还需要在虚拟环境里再装一次吗？</strong></p><p><strong>需要再安装一次</strong></p><p><strong>原因：</strong></p><p>创建虚拟环境（<code>venv</code>）时，默认情况下它是<strong>完全隔离的</strong>，不会“自动继承”你全局 Python（比如 C:\Python313）已经安装的包。所以即使全局 Python 有 pandas，虚拟环境里也看不到。</p><p><strong>❓怎么判断 numpy、pandas、matplotlib 是否安装成功？</strong></p><p>方法之一：在虚拟环境中用 <code>pip list</code></p><p>先激活虚拟环境（如果还没激活）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">venv\Scripts\activate</span><br></pre></td></tr></table></figure><p>然后输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip list</span><br></pre></td></tr></table></figure><p>✅ 如果你看到输出类似：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Package     Version</span><br><span class="line"><span class="comment">----------- -------</span></span><br><span class="line">numpy       <span class="number">1.26</span><span class="number">.4</span></span><br><span class="line">pandas      <span class="number">2.2</span><span class="number">.1</span></span><br><span class="line">matplotlib  <span class="number">3.8</span><span class="number">.4</span></span><br></pre></td></tr></table></figure><p>说明都安装成功了。</p><p><strong>❓虚拟环境是不是每次用项目前都要打开？用完要退出？</strong></p><p><strong>是的</strong></p><p>💡 使用前要激活：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">venv\Scripts\activate</span><br></pre></td></tr></table></figure><p>你会看到命令行变成这样：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(venv) D:\MyProjects\AIProject&gt;</span><br></pre></td></tr></table></figure><p>这个 <strong><code>(venv)</code> 前缀</strong>说明你现在就在虚拟环境里了。<br>🛑 用完项目后建议退出虚拟环境：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">deactivate</span><br></pre></td></tr></table></figure><p>它会把环境变量恢复到系统默认，避免你误操作装错地方。</p><p>✅ 最终流程总结一下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> D:\MyProjects\AIProject</span><br><span class="line">venv\Scripts\activate      ← ✅ 激活环境</span><br><span class="line">python my_script.py        ← ✅ 执行你的项目代码</span><br><span class="line">deactivate                 ← ✅ 用完后退出</span><br></pre></td></tr></table></figure><h2 id="如何在-VS-Code-PyCharm-使用虚拟环境？"><a href="#如何在-VS-Code-PyCharm-使用虚拟环境？" class="headerlink" title="如何在 VS Code &#x2F; PyCharm 使用虚拟环境？"></a>如何在 VS Code &#x2F; PyCharm 使用虚拟环境？</h2><h3 id="🟦-VS-Code-设置虚拟环境"><a href="#🟦-VS-Code-设置虚拟环境" class="headerlink" title="🟦 VS Code 设置虚拟环境"></a>🟦 VS Code 设置虚拟环境</h3><ul><li>打开你的项目文件夹（带有 <code>venv/</code> 的）</li><li>按 <code>Ctrl + Shift + P</code>，输入：</li></ul><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">Python:</span> <span class="keyword">Select</span> Interpreter</span><br></pre></td></tr></table></figure><ul><li>找到并选择你项目下的这个路径：</li></ul><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">**.\venv\Scripts\python.exe**</span><br></pre></td></tr></table></figure><blockquote><p>从此你在 VS Code 里按 F5 运行，或点击“Run”按钮，都会用你的虚拟环境。</p></blockquote><h3 id="🟥-PyCharm-设置虚拟环境"><a href="#🟥-PyCharm-设置虚拟环境" class="headerlink" title="🟥 PyCharm 设置虚拟环境"></a>🟥 PyCharm 设置虚拟环境</h3><ul><li>打开 PyCharm 项目</li><li>菜单栏 → <code>File</code> → <code>Settings/设置</code> → <code>Project: xxx/项目：</code> → <code>Python Interpreter</code></li><li>点击右上角**<code>添加解释器</code>** → <strong><code>Existing environment/选择现有</code></strong></li><li>浏览选择项目里的虚拟环境路径：</li></ul><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">D:\MyProjects\AIProject\venv\Scripts\python.exe</span></span><br></pre></td></tr></table></figure><ul><li>✅选择并保存即可。之后 PyCharm 就会用这个解释器来运行代码和安装包。</li></ul><p><img src="/imgff/14.png"></p><h3 id="🟦-项目结构：是不是在D-MyProjects-AIProject下创建各种该项目的具体文件夹文件然后运行就可以了，还是说只能有一个总的项目的文件夹？"><a href="#🟦-项目结构：是不是在D-MyProjects-AIProject下创建各种该项目的具体文件夹文件然后运行就可以了，还是说只能有一个总的项目的文件夹？" class="headerlink" title="🟦 项目结构：是不是在D:\MyProjects\AIProject下创建各种该项目的具体文件夹文件然后运行就可以了，还是说只能有一个总的项目的文件夹？"></a>🟦 项目结构：是不是在D:\MyProjects\AIProject下创建各种该项目的具体文件夹文件然后运行就可以了，还是说只能有一个总的项目的文件夹？</h3><p><strong>✅ 总结先说结论：</strong></p><blockquote><p>完全可以在 D:\MyProjects\AIProject 这个项目文件夹下，创建各种子文件夹和 .py 文件，<strong>只要虚拟环境在项目根目录下，就都能用！</strong></p></blockquote><blockquote><p>不需要只有一个 <code>.py</code> 文件，也不需要什么都堆在根目录，<strong>推荐你根据功能整理结构，越清晰越好！</strong></p></blockquote><p><strong>✅ 项目结构推荐（举例）（GPT给的建议，超棒！！！）</strong></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">D:\MyProjects\AIProject\</span><br><span class="line">│</span><br><span class="line">├── venv\                  ← 虚拟环境（不要动）</span><br><span class="line">│</span><br><span class="line">├── <span class="keyword">data</span>\                  ← 存放原始数据、csv 等</span><br><span class="line">│   └── example.csv</span><br><span class="line">│</span><br><span class="line">├── scripts\               ← 存放你的各类处理脚本</span><br><span class="line">│   └── analyze_data.py</span><br><span class="line">│</span><br><span class="line">├── utils\                 ← 存放工具函数模块</span><br><span class="line">│   └── plot_helper.py</span><br><span class="line">│</span><br><span class="line">├── main.py                ← 主程序入口</span><br><span class="line">├── run_project.bat        ← 一键运行脚本</span><br><span class="line">└── requirements.txt       ← （可选）依赖列表</span><br></pre></td></tr></table></figure><ul><li>不建议把虚拟环境 <code>venv/</code> 放进子文件夹（比如 <code>scripts/venv</code>）→ 会让路径管理变得混乱</li><li>项目文件夹越清晰，日后越容易维护、打包、迁移</li></ul><p>今天先到这里，其实过程中GPT给了我好几个bonus，如<strong>自动检查依赖 + 激活环境 + 运行项目</strong> 的一键运行脚本；自<strong>动检测缺失包、自动激活环境</strong>的运行脚本等，但是我还没有具体去了解，看上去.bat文件好像是个功能比较大的文件类型，可以用来实现一些快捷方式，看上去比较有意思。除此之外我还浅浅问了一下<strong>venv创建虚拟环境和使用anaconda创建虚拟环境</strong>的区别，大致了解了一下，应该是conda创建虚拟环境更加灵活，venv仅限python环境，而conda支持Python，R，C&#x2F;C++等多语言包，而且好像venv搭建pytorch框架会复杂更加困难，下次试着实操一下conda创建虚拟环境。加油！！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;上次在安装numpy和pandas过程中出现了各种各样的困难，到最后发现可能是自己安装了好几个python而且不在同一个盘导致调用错误，安装</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>2.3构造函数与析构函数</title>
    <link href="https://www.ffcchhgg.cn/2025/02/27/2-3%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E4%B8%8E%E6%9E%90%E6%9E%84%E5%87%BD%E6%95%B0/"/>
    <id>https://www.ffcchhgg.cn/2025/02/27/2-3%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E4%B8%8E%E6%9E%90%E6%9E%84%E5%87%BD%E6%95%B0/</id>
    <published>2025-02-27T11:48:31.000Z</published>
    <updated>2025-02-27T12:24:45.862Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2-3构造函数与析构函数"><a href="#2-3构造函数与析构函数" class="headerlink" title="2.3构造函数与析构函数"></a>2.3构造函数与析构函数</h1><hr><h2 id="构造函数与析构函数：通俗版解释"><a href="#构造函数与析构函数：通俗版解释" class="headerlink" title="构造函数与析构函数：通俗版解释"></a><strong>构造函数与析构函数：通俗版解释</strong></h2><hr><h3 id="1-构造函数：对象的“出生证明”"><a href="#1-构造函数：对象的“出生证明”" class="headerlink" title="1. 构造函数：对象的“出生证明”"></a><strong>1. 构造函数：对象的“出生证明”</strong></h3><ul><li><strong>作用</strong>：在对象创建时，自动初始化数据成员。</li><li><strong>特点</strong>：<ul><li>名字与类名相同（如<code>Dog()</code>）。</li><li>无返回值（连<code>void</code>都没有）。</li><li>可以重载（多个构造函数，按参数不同区分）。</li><li><strong>创建对象时，构造函数会被自动调用！！</strong></li></ul></li></ul><p><strong>例子</strong>：</p><hr><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    string name;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Dog</span>() &#123; name = <span class="string">&quot;无名&quot;</span>; age = <span class="number">0</span>; &#125;         <span class="comment">// 默认构造函数</span></span><br><span class="line">    <span class="built_in">Dog</span>(string n, <span class="type">int</span> a) &#123; name = n; age = a; &#125; <span class="comment">// 带参数的构造函数</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">**Dog d1;          <span class="comment">// 调用默认构造函数：name=&quot;无名&quot;, age=0**</span></span><br><span class="line"><span class="function">Dog <span class="title">d2</span><span class="params">(<span class="string">&quot;旺财&quot;</span>, <span class="number">3</span>)</span></span>; <span class="comment">// 调用带参数的构造函数：name=&quot;旺财&quot;, age=3</span></span><br></pre></td></tr></table></figure><h3 id="2-成员初始化表：高效初始化"><a href="#2-成员初始化表：高效初始化" class="headerlink" title="2. 成员初始化表：高效初始化"></a><strong>2. 成员初始化表：高效初始化</strong></h3><ul><li><strong>用途</strong>：初始化常量（<code>const</code>）、引用（<code>&amp;</code>）或没有默认构造函数的成员对象。</li><li><strong>语法</strong>：在构造函数后用冒号列出初始化项。</li><li><strong>执行顺序</strong>：按成员变量定义的顺序初始化，与初始化表顺序无关。</li></ul><p><strong>例子</strong>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> ID;  <span class="comment">// 常量必须初始化</span></span><br><span class="line">    string&amp; name;  <span class="comment">// 引用必须绑定</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Cat</span>(<span class="type">int</span> id, string&amp; n) : <span class="built_in">ID</span>(id), <span class="built_in">name</span>(n) &#123;&#125; <span class="comment">// 必须用初始化表</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><h3 id="3-析构函数：对象的“临终遗言”"><a href="#3-析构函数：对象的“临终遗言”" class="headerlink" title="3. 析构函数：对象的“临终遗言”"></a><strong>3. 析构函数：对象的“临终遗言”</strong></h3><ul><li><strong>作用</strong>：对象销毁前自动调用，释放额外申请的资源（如<strong>动态内存</strong>）。</li><li><strong>特点</strong>：<ul><li>名字是<code>~类名</code>（如<code>~Dog()</code>）。</li><li>无参数，不能重载。</li></ul></li></ul><p><strong>例子</strong>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">String</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">char</span>* str;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">String</span>(<span class="type">const</span> <span class="type">char</span>* s) &#123;</span><br><span class="line">        str = <span class="keyword">new</span> <span class="type">char</span>[<span class="built_in">strlen</span>(s)<span class="number">+1</span>]; <span class="comment">// 动态申请内存</span></span><br><span class="line">        <span class="built_in">strcpy</span>(str, s);</span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">String</span>() &#123;</span><br><span class="line">        <span class="keyword">delete</span>[] str; <span class="comment">// 必须释放内存，否则内存泄漏</span></span><br><span class="line">        str = <span class="literal">nullptr</span>; <span class="comment">// 可选，防止野指针</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><h3 id="4-成员对象的构造与析构顺序"><a href="#4-成员对象的构造与析构顺序" class="headerlink" title="4. 成员对象的构造与析构顺序"></a><strong>4. 成员对象的构造与析构顺序</strong></h3><ul><li><strong>构造顺序</strong>：先构造成员对象，再构造自身。！！！</li><li><strong>析构顺序</strong>：先析构自身，再析构成员对象。！！！</li></ul><p><strong>例子</strong>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Engine</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Engine</span>() &#123; cout &lt;&lt; <span class="string">&quot;引擎启动\\n&quot;</span>; &#125;</span><br><span class="line">    ~<span class="built_in">Engine</span>() &#123; cout &lt;&lt; <span class="string">&quot;引擎关闭\\n&quot;</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Car</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Engine engine; <span class="comment">// 成员对象</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Car</span>() &#123; cout &lt;&lt; <span class="string">&quot;汽车组装完成\\n&quot;</span>; &#125;</span><br><span class="line">    ~<span class="built_in">Car</span>() &#123; cout &lt;&lt; <span class="string">&quot;汽车报废\\n&quot;</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Car myCar;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出：</span></span><br><span class="line"><span class="comment">// 引擎启动 → 汽车组装完成 → 汽车报废 → 引擎关闭</span></span><br></pre></td></tr></table></figure><hr><h3 id="5-显式调用析构函数？危险！"><a href="#5-显式调用析构函数？危险！" class="headerlink" title="5. 显式调用析构函数？危险！"></a><strong>5. 显式调用析构函数？危险！</strong></h3><ul><li><strong>问题</strong>：手动调用析构函数不会销毁对象，但会释放资源（暂时归还对象额外申请的资源），导致对象处于无效状态。</li><li><strong>例子</strong>：</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">String <span class="title">s</span><span class="params">(<span class="string">&quot;Hello&quot;</span>)</span></span>;</span><br><span class="line">s.~<span class="built_in">String</span>(); <span class="comment">// 释放内存，但s对象还在！</span></span><br><span class="line">s.<span class="built_in">print</span>();   <span class="comment">// 崩溃！因为str已被释放。</span></span><br></pre></td></tr></table></figure><hr><h3 id="6-为什么需要构造函数和析构函数？"><a href="#6-为什么需要构造函数和析构函数？" class="headerlink" title="6. 为什么需要构造函数和析构函数？"></a><strong>6. 为什么需要构造函数和析构函数？</strong></h3><ul><li><strong>构造函数</strong>：确保对象出生时状态合法（如年龄不为负数）。</li><li><strong>析构函数</strong>：防止资源泄漏（如内存、文件句柄）。</li></ul><hr><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h3><ul><li><strong>构造函数</strong>：对象的“出生仪式”，负责初始化。</li><li><strong>析构函数</strong>：对象的“告别仪式”，负责清理。</li><li><strong>成员初始化表</strong>：专门处理常量、引用和复杂成员对象的初始化。</li><li><strong>顺序规则</strong>：成员对象先构造后析构，自身后构造先析构。</li></ul><p><strong>比喻</strong>：</p><ul><li>构造函数像装修队，房子建好后帮你布置家具。</li><li>析构函数像搬家公司，房子拆之前帮你清空家具。</li><li>成员初始化表像装修清单，规定必须先装水电才能刷墙。</li></ul><h2 id="三种常见的初始化成员变量方式"><a href="#三种常见的初始化成员变量方式" class="headerlink" title="三种常见的初始化成员变量方式"></a>三种常见的初始化成员变量方式</h2><p>在 C++ 中，<strong>就地初始化</strong>、<strong>初始化列表</strong>和<strong>构造函数体内初始化</strong>是三种常见的初始化成员变量的方式。它们有不同的使用场景、先后顺序以及相应的限制。下面我们详细分析这三种初始化方式。</p><h3 id="1-就地初始化（In-Class-Initialization）"><a href="#1-就地初始化（In-Class-Initialization）" class="headerlink" title="1. 就地初始化（In-Class Initialization）"></a>1. <strong>就地初始化（In-Class Initialization）</strong></h3><p>就地初始化是指在类定义内部直接为成员变量提供默认值。它在类定义时进行初始化，<strong>适用于普通成员变量（非引用或常量</strong>）：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="type">int</span> x = <span class="number">10</span>;         <span class="comment">// 普通成员变量的就地初始化</span></span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> y = <span class="number">20</span>;   <span class="comment">// 常量成员的就地初始化</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">A</span>() &#123;&#125;              <span class="comment">// 构造函数</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>特点</strong>：</p><ul><li>就地初始化为成员变量提供默认值。</li><li>只适用于普通成员变量，<strong>不适用于引用类型</strong>和<strong>常量类型</strong>（常量成员需要在构造函数初始化列表中初始化）。</li><li>如果构造函数没有显式为成员变量提供值，那么成员变量会使用就地初始化提供的默认值。</li></ul><p><strong>优点</strong>：</p><ul><li>简洁，避免在构造函数中显式赋值。</li><li>适用于大多数普通成员变量的初始化。</li></ul><p><strong>注意</strong>：</p><ul><li>就地初始化的优先级比构造函数体内的赋值高，但在初始化列表之前。</li></ul><h3 id="2-初始化列表（Member-Initialization-List）"><a href="#2-初始化列表（Member-Initialization-List）" class="headerlink" title="2. 初始化列表（Member Initialization List）"></a>2. <strong>初始化列表（Member Initialization List）</strong></h3><p>初始化列表是在构造函数的参数后通过 <code>:</code> 来初始化成员变量。它用于初始化所有类型的成员（<strong>包括常量和引用及没有默认构造函数的类类型成员变量</strong>）。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="type">int</span> x;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> y;</span><br><span class="line">    <span class="type">int</span>&amp; z;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    **<span class="built_in">A</span>() : <span class="built_in">x</span>(<span class="number">10</span>), <span class="built_in">y</span>(<span class="number">20</span>), <span class="built_in">z</span>(x) &#123;&#125; <span class="comment">// 通过初始化列表初始化成员**</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>特点</strong>：</p><ul><li>用于初始化成员变量，尤其是<strong>常量</strong>和<strong>引用类型</strong>成员。</li><li><strong>常量类型的成员变量</strong>必须在初始化列表中进行初始化，不能在构造函数体内进行赋值。</li><li><strong>引用类型的成员变量</strong>也必须在初始化列表中进行初始化。</li><li><strong>没有默认构造函数的类类型成员变量</strong>也必须在初始化列表中进行初始化。如果类中的成员变量是其他类的对象，并且这个类没有默认构造函数（即没有无参构造函数），那么在创建包含它的类的对象时，必须在初始化列表中调用该成员变量所属类的合适构造函数来进行初始化。例如：</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">AnotherClass</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">AnotherClass</span>(<span class="type">int</span> data) : <span class="built_in">data</span>(data) &#123;&#125;  <span class="comment">// 有参构造函数</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> data;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">MyClass</span>(<span class="type">int</span> value) : <span class="built_in">anotherObj</span>(value) &#123;&#125;  <span class="comment">// 在初始化列表中初始化AnotherClass类型的成员变量anotherObj</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    AnotherClass anotherObj;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>成员的初始化顺序总是按照在类定义中的声明顺序，而不是在初始化列表中的顺序。</li></ul><p><strong>优点</strong>：</p><ul><li>允许对常量成员、引用成员以及普通成员进行初始化。</li><li>能够在对象创建时直接为常量成员和引用成员提供正确的初始化。</li></ul><p><strong>缺点</strong>：</p><ul><li>无法对默认值提供修改，必须在构造函数初始化列表中进行初始化。</li></ul><h3 id="3-构造函数体内初始化（In-Constructor-Body）"><a href="#3-构造函数体内初始化（In-Constructor-Body）" class="headerlink" title="3. 构造函数体内初始化（In Constructor Body）"></a>3. <strong>构造函数体内初始化（In Constructor Body）</strong></h3><p>在构造函数体内进行初始化，通常是通过赋值语句对成员变量赋值。</p><p>在 C++ 类中，<strong>除了必须在初始化列表中初始化的成员变量</strong>（引用成员变量、常量成员变量、没有默认构造函数的类类型成员变量）<strong>外，其他类型的成员变量均可以在构造函数体内进行初始化。</strong>比如对 <code>const</code> 和引用类型的成员不能使用此方式进行初始化。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="type">int</span> x;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> y;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">A</span>() &#123;</span><br><span class="line">        x = <span class="number">10</span>;         <span class="comment">// 普通成员变量</span></span><br><span class="line">        <span class="comment">// y = 20;      // 错误！不能在构造函数体内为 const 成员赋值</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>特点</strong>：</p><ul><li>可以为所有类型的成员变量赋值，通常用于普通成员。</li><li><strong>引用成员和常量成员不能</strong>在构造函数体内赋值（因为它们必须在初始化列表中初始化）。</li><li>构造函数体内的初始化仅发生在对象构造后，已经为成员提供了默认值（如果有的话）。</li></ul><p><strong>优点</strong>：</p><ul><li>适用于普通成员变量，可以根据需要动态计算初始化值。</li></ul><p><strong>缺点</strong>：</p><ul><li>无法初始化引用类型和常量类型的成员变量。</li><li>相比初始化列表，效率略低，因为它们会在默认初始化后再次赋值。</li></ul><h3 id="初始化顺序"><a href="#初始化顺序" class="headerlink" title="@初始化顺序"></a>@初始化顺序</h3><ul><li>不同成员变量的初始化顺序是<strong>它们在类中声明的顺序</strong></li><li>同一成员变量的初始化顺序：<strong>就地初始化≥初始化列表≥构造函数</strong></li></ul><p>例如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="type">int</span> x;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> y;</span><br><span class="line">    <span class="type">int</span>&amp; z;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">A</span>() : <span class="built_in">z</span>(x), <span class="built_in">y</span>(<span class="number">20</span>) &#123;&#125; <span class="comment">// y 先初始化，z 后初始化</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="结论：各方法的区别与适用情况"><a href="#结论：各方法的区别与适用情况" class="headerlink" title="结论：各方法的区别与适用情况"></a>结论：各方法的区别与适用情况</h3><table><thead><tr><th>初始化方式</th><th>可用成员类型</th><th>使用场景</th><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td>就地初始化</td><td>普通成员变量</td><td>简单的默认值初始化</td><td>代码简洁，适合普通成员变量</td><td>不能用于引用、常量类型成员</td></tr><tr><td>初始化列表</td><td>所有类型的成员</td><td>需要初始化常量或引用类型成员</td><td>支持所有成员类型，初始化顺序明确，效率高</td><td>语法相对复杂，无法提供动态默认值</td></tr><tr><td>构造函数体内初始化</td><td>所有类型的成员</td><td>需要动态计算初始化值</td><td>灵活，适用于普通成员变量，赋值可以更复杂</td><td>无法初始化引用和常量成员，效率较低</td></tr></tbody></table><p>在实际编程中，推荐使用<strong>初始化列表</strong>来初始化类的成员，特别是对于常量和引用类型成员。<strong>就地初始化</strong>适合简单的成员变量初始化，<strong>构造函数体内初始化</strong>则主要用于普通成员的后续赋值。</p><h2 id="析构函数"><a href="#析构函数" class="headerlink" title="析构函数"></a>析构函数</h2><p>析构函数（<strong>Destructor</strong>）是类的一种特殊成员函数，用于在对象生命周期结束时执行清理操作。当对象的生命周期结束（即对象被销毁）时，析构函数会自动被调用。</p><h3 id="1-析构函数的基本定义"><a href="#1-析构函数的基本定义" class="headerlink" title="1. 析构函数的基本定义"></a>1. <strong>析构函数的基本定义</strong></h3><p>析构函数的名称与类名相同，但前面有一个波浪符号 <code>~</code>。析构函数没有返回类型，也没有参数。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    ~<span class="built_in">MyClass</span>() &#123;</span><br><span class="line">        <span class="comment">// 析构函数的清理操作</span></span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;对象被销毁了！&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-析构函数的特点"><a href="#2-析构函数的特点" class="headerlink" title="2. 析构函数的特点"></a>2. <strong>析构函数的特点</strong></h3><ul><li><strong>自动调用</strong>：析构函数会在对象的生命周期结束时自动调用，通常是在对象超出作用域或被显式销毁时。</li><li><strong>没有参数</strong></li><li><strong>没有返回值</strong>。</li><li><strong>每个类只有一个析构函数</strong>：一个类最多只能有一个析构函数。</li><li><strong>无法被重载</strong>：与构造函数不同，析构函数不能有重载版本。</li><li><strong>无法手动调用</strong>：析构函数是由编译器自动调用的，程序员不能显式地调用析构函数。</li></ul><h3 id="3-析构函数的作用"><a href="#3-析构函数的作用" class="headerlink" title="3. 析构函数的作用"></a>3. <strong>析构函数的作用</strong></h3><p>析构函数的主要作用是进行资源的释放和清理工作，尤其是当类涉及动态内存分配或者拥有外部资源时。常见的用途包括：</p><ul><li><strong>释放通过 <code>new</code> 动态分配的内存</strong>。</li><li>关闭打开的文件句柄。</li><li>释放网络连接或数据库连接等资源。</li><li>清理其他需要手动管理的资源（例如 <code>mutex</code>、<code>socket</code> 等）。</li></ul><h3 id="4-析构函数的自动调用时机"><a href="#4-析构函数的自动调用时机" class="headerlink" title="4. 析构函数的自动调用时机"></a>4. <strong>析构函数的自动调用时机</strong></h3><p>析构函数的调用时机有几个典型情况：</p><ul><li><strong>局部对象</strong>：当一个局部对象超出作用域时，析构函数会被调用。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    MyClass obj; <span class="comment">// obj 在函数结束时会被销毁，析构函数会被调用</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>动态分配的对象</strong>：如果对象通过 <code>new</code> 创建，那么在调用 <code>delete</code> 时析构函数会被调用。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">MyClass* p = <span class="keyword">new</span> <span class="built_in">MyClass</span>(); <span class="comment">// 动态创建对象</span></span><br><span class="line"><span class="keyword">delete</span> p;  <span class="comment">// 释放对象并调用析构函数</span></span><br></pre></td></tr></table></figure><ul><li><strong>全局和静态对象</strong>：全局对象或静态对象在程序结束时会调用析构函数。</li></ul><h3 id=""><a href="#" class="headerlink" title=""></a></h3><p><strong>⚠️必考！！！！！！！！！！！！！！！！！</strong></p><p><strong>必须手动创建析构函数的情况！！！</strong><br><img src="/imgff/7.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;2-3构造函数与析构函数&quot;&gt;&lt;a href=&quot;#2-3构造函数与析构函数&quot; class=&quot;headerlink&quot; title=&quot;2.3构造函数与析构函数&quot;&gt;&lt;/a&gt;2.3构造函数与析构函数&lt;/h1&gt;&lt;hr&gt;
&lt;h2 id=&quot;构造函数与析构函数：通俗版解释&quot;&gt;&lt;a </summary>
      
    
    
    
    <category term="高程" scheme="https://www.ffcchhgg.cn/categories/%E9%AB%98%E7%A8%8B/"/>
    
    <category term="第二章" scheme="https://www.ffcchhgg.cn/categories/%E9%AB%98%E7%A8%8B/%E7%AC%AC%E4%BA%8C%E7%AB%A0/"/>
    
    
    <category term="高程" scheme="https://www.ffcchhgg.cn/tags/%E9%AB%98%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>2.2this指针</title>
    <link href="https://www.ffcchhgg.cn/2025/02/27/2-2this%E6%8C%87%E9%92%88/"/>
    <id>https://www.ffcchhgg.cn/2025/02/27/2-2this%E6%8C%87%E9%92%88/</id>
    <published>2025-02-27T09:48:06.000Z</published>
    <updated>2025-02-27T12:24:22.945Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2-2this指针"><a href="#2-2this指针" class="headerlink" title="2-2this指针"></a>2-2this指针</h1><hr><h3 id="“this指针”通俗版解释"><a href="#“this指针”通俗版解释" class="headerlink" title="“this指针”通俗版解释"></a><strong>“this指针”通俗版解释</strong></h3><hr><h3 id="1-为什么需要this指针？"><a href="#1-为什么需要this指针？" class="headerlink" title="1. 为什么需要this指针？"></a><strong>1. 为什么需要this指针？</strong></h3><p>想象你有一个班级，每个学生（对象）都有自己的姓名和成绩（数据），但全班共用同一本教材（成员函数）。</p><ul><li>老师提问时，教材里的答案要对应到具体学生。比如问“你的成绩是多少？”，教材需要知道当前问的是<strong>哪个学生</strong>。</li><li><strong>this指针</strong>就像老师手里的名单，告诉教材：“现在操作的是张三，下一个是李四”。</li></ul><p><strong>代码例子</strong>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> score;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setScore</span><span class="params">(<span class="type">int</span> s)</span> </span>&#123;</span><br><span class="line">        score = s; <span class="comment">// 这里的score属于当前调用setScore的对象</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Student zhangsan, lisi;</span><br><span class="line">zhangsan.<span class="built_in">setScore</span>(<span class="number">90</span>); <span class="comment">// this指向zhangsan</span></span><br><span class="line">lisi.<span class="built_in">setScore</span>(<span class="number">85</span>);     <span class="comment">// this指向lisi</span></span><br></pre></td></tr></table></figure><hr><h3 id="2-this指针是什么？"><a href="#2-this指针是什么？" class="headerlink" title="2. this指针是什么？"></a><strong>2. this指针是什么？</strong></h3><ul><li><strong>隐藏的指针</strong>：每个成员函数（非静态）都有一个隐藏参数<code>this</code>，指向调用该函数的对象。</li><li><strong>自动传递</strong>：当你调用<code>a.g(1)</code>时，编译器偷偷把<code>&amp;a</code>传给<code>this</code>，函数内部通过<code>this-&gt;x</code>访问<code>a.x</code>。</li></ul><p><strong>编译器视角</strong>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 你写的代码：</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">setScore</span><span class="params">(<span class="type">int</span> s)</span> </span>&#123; score = s; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 编译器实际处理：</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">setScore</span><span class="params">(Student *<span class="keyword">this</span>, <span class="type">int</span> s)</span> </span>&#123; <span class="keyword">this</span>-&gt;score = s; &#125;</span><br></pre></td></tr></table></figure><hr><h3 id="3-什么时候需要显式用this？"><a href="#3-什么时候需要显式用this？" class="headerlink" title="3. 什么时候需要显式用this？"></a><strong>3. 什么时候需要显式用this？</strong></h3><ul><li><p><strong>场景1：返回对象自己</strong></p><p>  比如实现链式调用：</p>  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Counter</span> &#123;</span><br><span class="line">    <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">Counter&amp; <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        count++;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>; <span class="comment">// 返回当前对象，支持连续调用</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Counter c;</span><br><span class="line">c.<span class="built_in">add</span>().<span class="built_in">add</span>().<span class="built_in">add</span>(); <span class="comment">// 连续加3次</span></span><br></pre></td></tr></table></figure></li><li><p><strong>场景2：区分同名变量</strong></p><p>  当成员变量和参数同名时：</p>  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> &#123;</span><br><span class="line">    string name;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setName</span><span class="params">(string name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;name = name; <span class="comment">// this-&gt;name是成员变量，name是参数</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul><hr><h3 id="4-用C语言模拟this指针"><a href="#4-用C语言模拟this指针" class="headerlink" title="4. 用C语言模拟this指针"></a><strong>4. 用C语言模拟this指针</strong></h3><p>C语言没有类，但可以用结构体和函数模拟：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// C++的类：</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">bark</span><span class="params">()</span> </span>&#123; cout &lt;&lt; <span class="string">&quot;汪汪！&quot;</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对应的C代码：</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Dog</span> &#123; <span class="comment">/* 数据成员 */</span> &#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bark</span><span class="params">(<span class="keyword">struct</span> Dog *<span class="keyword">this</span>)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;汪汪！&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用：</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Dog</span> d;</span><br><span class="line"><span class="built_in">bark</span>(&amp;d); <span class="comment">// 相当于d.bark()</span></span><br></pre></td></tr></table></figure><hr><h3 id="5-总结"><a href="#5-总结" class="headerlink" title="5. 总结"></a><strong>5. 总结</strong></h3><ul><li><strong>this指针的作用</strong>：告诉成员函数“当前操作的是哪个对象”。</li><li><strong>自动传递</strong>：你不需要手动写<code>this</code>，编译器帮你加。</li><li><strong>显式使用场景</strong>：<strong>返回对象、区分同名变量、传递对象自身</strong>。</li></ul><p><strong>比喻</strong>：</p><ul><li>类成员函数像一份公共菜谱，<code>this</code>指针像厨师手里的食材，告诉菜谱：“现在炒的是这盘菜”。</li><li>没有<code>this</code>，所有对象的数据会乱成一锅粥！</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;2-2this指针&quot;&gt;&lt;a href=&quot;#2-2this指针&quot; class=&quot;headerlink&quot; title=&quot;2-2this指针&quot;&gt;&lt;/a&gt;2-2this指针&lt;/h1&gt;&lt;hr&gt;
&lt;h3 id=&quot;“this指针”通俗版解释&quot;&gt;&lt;a href=&quot;#“this指针</summary>
      
    
    
    
    <category term="高程" scheme="https://www.ffcchhgg.cn/categories/%E9%AB%98%E7%A8%8B/"/>
    
    <category term="第二章" scheme="https://www.ffcchhgg.cn/categories/%E9%AB%98%E7%A8%8B/%E7%AC%AC%E4%BA%8C%E7%AB%A0/"/>
    
    
    <category term="高程" scheme="https://www.ffcchhgg.cn/tags/%E9%AB%98%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>2.1对象与类</title>
    <link href="https://www.ffcchhgg.cn/2025/02/27/2-1%E5%AF%B9%E8%B1%A1%E4%B8%8E%E7%B1%BB/"/>
    <id>https://www.ffcchhgg.cn/2025/02/27/2-1%E5%AF%B9%E8%B1%A1%E4%B8%8E%E7%B1%BB/</id>
    <published>2025-02-27T09:34:59.000Z</published>
    <updated>2025-02-27T12:23:10.066Z</updated>
    
    <content type="html"><![CDATA[<hr><h3 id="对象与类：通俗版解释"><a href="#对象与类：通俗版解释" class="headerlink" title="对象与类：通俗版解释"></a><strong>对象与类：通俗版解释</strong></h3><hr><h3 id="1-类和对象是什么？"><a href="#1-类和对象是什么？" class="headerlink" title="1. 类和对象是什么？"></a><strong>1. 类和对象是什么？</strong></h3><ul><li><strong>类</strong>：就像一张<strong>设计图</strong>。比如“汽车设计图”规定了一辆车必须有轮子、发动机、方向盘，还能加速和刹车。</li><li><strong>对象</strong>：按照设计图造出来的<strong>具体东西</strong>。比如根据“汽车设计图”造出一辆红色跑车，或者一辆蓝色卡车。</li></ul><p>一个类可以创建出多个对象</p><p><strong>例子</strong>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> &#123;     <span class="comment">// 类：狗的“设计图”，通常开头字母大写</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    string name;  <span class="comment">// 属性：名字</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">bark</span><span class="params">()</span> </span>&#123; <span class="comment">// 方法：叫</span></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;汪汪！&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Dog myDog;       <span class="comment">// 对象：按设计图造出一只狗，叫myDog</span></span><br><span class="line">myDog.name = <span class="string">&quot;旺财&quot;</span>; <span class="comment">// 给狗取名</span></span><br><span class="line">myDog.<span class="built_in">bark</span>();        <span class="comment">// 让狗叫：输出“汪汪！”</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h3 id="2-类的成员：数据和函数"><a href="#2-类的成员：数据和函数" class="headerlink" title="2. 类的成员：数据和函数"></a><strong>2. 类的成员：数据和函数</strong></h3><ul><li><strong>数据成员</strong>：描述对象的属性。比如狗的年龄、颜色。</li><li><strong>成员函数</strong>：描述对象能做什么。比如狗会叫、会跑。</li></ul><p><strong>关键点</strong>：</p><ul><li>数据和方法都写在类里，形成一个整体。</li><li><strong>数据一般藏起来（private）</strong>，<strong>方法暴露出去（public）</strong>。<br>→ 比如狗的年龄是私有的（不能随便改），但“叫”的方法是公开的（谁都能让狗叫）。</li></ul><hr><h3 id="3-访问控制：public、private、protected"><a href="#3-访问控制：public、private、protected" class="headerlink" title="3. 访问控制：public、private、protected"></a><strong>3. 访问控制：public、private、protected</strong></h3><ul><li><strong>public（公开）</strong>：像房子的门铃，谁都能按。</li><li><strong>private（私有）</strong>：像房子的保险箱，只有主人（类内部）能开<strong>。不能在类外改，只能在类内使用？修改。</strong></li><li><strong>protected（保护）</strong>：像家族保险箱，主人和子女（派生类）能开。</li></ul><p><strong>例子</strong>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">BankAccount</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> balance; <span class="comment">// 余额：私有的，不能直接改</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">deposit</span><span class="params">(<span class="type">int</span> money)</span> </span>&#123; <span class="comment">// 存钱：公开方法</span></span><br><span class="line">        balance += money;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 外部无法直接改balance，只能通过deposit()存钱</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h3 id="4-对象的创建：直接和间接"><a href="#4-对象的创建：直接和间接" class="headerlink" title="4. 对象的创建：直接和间接"></a><strong>4. 对象的创建：直接和间接</strong></h3><ul><li><p><strong>直接创建</strong>：就像买现成的房子。</p>  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Dog myDog; <span class="comment">// 直接定义一个狗对象</span></span><br></pre></td></tr></table></figure><p>  <img src="/imgff/3.png"></p></li><li><p><strong>间接创建（动态对象）</strong>：就像租房子，用完了要退租。</p>  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Dog *p = <span class="keyword">new</span> <span class="built_in">Dog</span>(); <span class="comment">// 租一只狗</span></span><br><span class="line">p-&gt;<span class="built_in">bark</span>();          <span class="comment">// 让狗叫</span></span><br><span class="line"><span class="keyword">delete</span> p;           <span class="comment">// 退租（销毁狗）</span></span><br></pre></td></tr></table></figure></li></ul><p><strong>注意</strong>：动态对象必须用<code>new</code>创建，<code>delete</code>销毁，否则会“内存泄漏”（房子不退租，一直占着地皮）。<br><img src="/imgff/4.png"><br>(attachment:5dc98c3e-8e60-4244-b1b1-8210d8fb0225:image.png)</p><hr><h3 id="5-成员函数：类内和类外实现（二者等价）"><a href="#5-成员函数：类内和类外实现（二者等价）" class="headerlink" title="5. 成员函数：类内和类外实现（二者等价）"></a><strong>5. 成员函数：类内和类外实现（二者等价）</strong></h3><ul><li><p><strong>类内实现</strong>：直接把功能写在设计图里。</p>  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">bark</span><span class="params">()</span> </span>&#123; cout &lt;&lt; <span class="string">&quot;汪汪！&quot;</span>; &#125; <span class="comment">// 类内实现</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p><strong>类外实现</strong>：设计图只写功能名，具体实现写在别处。更常用</p>  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">bark</span><span class="params">()</span></span>; <span class="comment">// 声明</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">void</span> **Dog::**<span class="built_in">bark</span>() &#123; **<span class="comment">// 类外实现，加“&lt;类名&gt;::”**</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;汪汪！&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><hr><h3 id="6-成员对象：对象里的对象（数据成员的类型是类）"><a href="#6-成员对象：对象里的对象（数据成员的类型是类）" class="headerlink" title="6. 成员对象：对象里的对象（数据成员的类型是类）"></a><strong>6. 成员对象：对象里的对象（数据成员的类型是类）</strong></h3><ul><li>一个类可以包含另一个类的对象。比如“汽车类”包含“发动机类”的对象。不能包含该类的对象</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Engine</span> &#123; ... &#125;;      <span class="comment">// 发动机类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Car</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Engine engine;         <span class="comment">// 成员对象：汽车的发动机</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123; engine.<span class="built_in">ignite</span>(); &#125; <span class="comment">// 调用发动机的方法</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><h3 id="7-对象的使用：赋值、传参、返回值"><a href="#7-对象的使用：赋值、传参、返回值" class="headerlink" title="7. 对象的使用：赋值、传参、返回值"></a><strong>7. 对象的使用：赋值、传参、返回值</strong></h3><ul><li><p><strong>赋值</strong>：复制数据（比如把A狗的年龄复制给B狗）。<strong>同类对象进行赋值默认是把A的数据成员分别赋值给对象B的相应数据成员</strong></p></li><li><p><strong>传址：</strong></p><pre><code>   取对象地址   Date today;   Date *p_date;    p_date = &amp;today; //把对象today的地址赋值给指针p_date</code></pre></li><li><p><strong>传参</strong>：</p><ul><li>传值：复制整个对象（修改不影响原对象）。</li><li>传引用：直接操作原对象（修改会影响原对象）。</li></ul></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">changeName</span><span class="params">(Dog d)</span> </span>&#123; d.name = <span class="string">&quot;小黑&quot;</span>; &#125; <span class="comment">// 传值：原狗名字不变</span></span><br><span class="line">**相当于copy了一份，把copy后的对象传给函数，原本对象d不会被函数修改**</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">changeNameRef</span><span class="params">(Dog &amp;d)</span> </span>&#123; d.name = <span class="string">&quot;小黑&quot;</span>; &#125; <span class="comment">// 传引用：原狗名字变</span></span><br><span class="line">**相当于把d直接传给函数，对象d会直接被函数修改** </span><br></pre></td></tr></table></figure><ul><li><strong>返回值</strong>：可以返回对象（临时副本）或引用（原对象）。</li></ul><p><img src="/imgff/5.png"></p><p><img src="/imgff/6.png"></p><hr><p>⚠️<strong>必考点！！！针对“把对象作为参数传给函数”与“把对象作为函数的返回值”只要有&amp;就直接修改或返回，没有就copy一份再修改或返回</strong></p><h3 id="8-为什么重要？"><a href="#8-为什么重要？" class="headerlink" title="8. 为什么重要？"></a><strong>8. 为什么重要？</strong></h3><ul><li><strong>封装</strong>：保护数据（比如不能直接改狗的年龄为负数）。</li><li><strong>模块化</strong>：每个类独立，方便修改（比如改发动机代码，不影响汽车其他部分）。</li><li><strong>复用性</strong>：设计图（类）可以反复用，还能继承扩展（比如“警犬类”继承“狗类”）。</li></ul><hr><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h3><ul><li><strong>类</strong>是设计图，<strong>对象</strong>是实物。</li><li><strong>数据藏起来</strong>，<strong>方法露出去</strong>。</li><li><strong>动态对象</strong>用完要销毁，<strong>成员对象</strong>随主对象生灭。</li><li><strong>传参和返回值</strong>要注意是复制还是引用。</li></ul><p>就像造车：</p><ul><li>设计图（类）规定必须有发动机和方向盘。</li><li>造出的车（对象）可以加油、刹车。</li><li>发动机（成员对象）藏在车里，不能直接拆。</li><li>租车（动态对象）用完要还，否则亏钱！</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ju</span>&#123;</span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> chang;</span><br><span class="line">    <span class="type">int</span> kuan;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">ju</span>(<span class="type">int</span> a,<span class="type">int</span> b):<span class="built_in">chang</span>(a),<span class="built_in">kuan</span>(b)&#123;&#125;<span class="comment">//如果使用这种初始化方式，则需要在main函数中在一开始定义一个对象的时候就初始化！！！！</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">area</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">ju::area</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> chang*kuan;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function">ju <span class="title">juu</span><span class="params">(<span class="number">4</span>,<span class="number">3</span>)</span></span>;**<span class="comment">//字符串string要加双引号！！！**</span></span><br><span class="line">    cout&lt;&lt;juu.<span class="built_in">area</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Car</span>&#123;</span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">    string name;</span><br><span class="line">    string madel;</span><br><span class="line">    <span class="type">int</span> year;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">inname</span><span class="params">(string a)</span></span>&#123;</span><br><span class="line">        name=a;</span><br><span class="line">    &#125;   <span class="comment">//如果使用这种初始化，需要在main函数中挨个调用这几个初始化函数，不能在定义的时候初始化！！！！</span></span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> 关键字出现在成员函数的声明中，作用是 指示该成员函数**不会修改类的成员变量**，即它是一个“只读”函数。</span><br><span class="line"></span><br><span class="line">具体来说，<span class="built_in">getSalary</span>() <span class="type">const</span> 的 <span class="type">const</span> 关键字有以下作用：</span><br><span class="line"></span><br><span class="line">**禁止修改类的成员变量**：函数内部不能修改类的非静态成员变量。如果在 <span class="built_in">getSalary</span>() 函数内部试图修改 salary 或其他成员变量，编译器会报错。</span><br><span class="line"></span><br><span class="line">**保证对象的状态不变**：这种做法表明 <span class="built_in">getSalary</span>() 函数不应该改变调用该函数的对象的状态，因此它可以被调用在 <span class="type">const</span> 对象上（即常量对象）。如果 <span class="type">const</span> 成员函数修改对象状态，编译器会报错。</span><br><span class="line"></span><br><span class="line">提升代码可读性和安全性：通过标记为 <span class="type">const</span>，你告诉别人或编译器，函数调用不会有副作用，避免了意外的修改。</span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">em</span>&#123;</span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">    string name;</span><br><span class="line">    string ID;</span><br><span class="line">    <span class="type">double</span> salary;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">em</span>(string a,string b,<span class="type">double</span> c):<span class="built_in">name</span>(a),<span class="built_in">ID</span>(b),<span class="built_in">salary</span>(c)&#123;&#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">gg</span><span class="params">(<span class="type">double</span> jixiao)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(jixiao&gt;=<span class="number">0</span>&amp;&amp;jixiao&lt;<span class="number">+1.4</span>)&#123;</span><br><span class="line">            salary*=jixiao;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;Your salary enchanged.&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">sets</span><span class="params">(<span class="type">double</span> a)</span></span>&#123;</span><br><span class="line">        salary=a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">string <span class="title">getname</span><span class="params">()</span><span class="type">const</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">string <span class="title">getID</span><span class="params">()</span><span class="type">const</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ID;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">gets</span><span class="params">()</span><span class="type">const</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> salary;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function">em <span class="title">wang</span><span class="params">(<span class="string">&quot;wrf&quot;</span>,<span class="string">&quot;241220103&quot;</span>,<span class="number">30000</span>)</span></span>;</span><br><span class="line">    cout&lt;&lt;wang.<span class="built_in">getname</span>()&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;wang.<span class="built_in">getID</span>()&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;wang.<span class="built_in">gets</span>()&lt;&lt;endl;</span><br><span class="line">    wang.<span class="built_in">sets</span>(<span class="number">35000</span>);</span><br><span class="line">    wang.<span class="built_in">gg</span>(<span class="number">1.2</span>);</span><br><span class="line">    cout&lt;&lt;wang.<span class="built_in">gets</span>()&lt;&lt;endl;</span><br><span class="line">    wang.<span class="built_in">gg</span>(<span class="number">1.8</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;h3 id=&quot;对象与类：通俗版解释&quot;&gt;&lt;a href=&quot;#对象与类：通俗版解释&quot; class=&quot;headerlink&quot; title=&quot;对象与类：通俗版解释&quot;&gt;&lt;/a&gt;&lt;strong&gt;对象与类：通俗版解释&lt;/strong&gt;&lt;/h3&gt;&lt;hr&gt;
&lt;h3 id=&quot;1-类和对象</summary>
      
    
    
    
    <category term="高程" scheme="https://www.ffcchhgg.cn/categories/%E9%AB%98%E7%A8%8B/"/>
    
    <category term="第二章" scheme="https://www.ffcchhgg.cn/categories/%E9%AB%98%E7%A8%8B/%E7%AC%AC%E4%BA%8C%E7%AB%A0/"/>
    
    
    <category term="高程" scheme="https://www.ffcchhgg.cn/tags/%E9%AB%98%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>STLDay2</title>
    <link href="https://www.ffcchhgg.cn/2025/02/06/STLDay2/"/>
    <id>https://www.ffcchhgg.cn/2025/02/06/STLDay2/</id>
    <published>2025-02-06T02:21:13.000Z</published>
    <updated>2025-02-06T02:41:07.614Z</updated>
    
    <content type="html"><![CDATA[<h1 id="std-list"><a href="#std-list" class="headerlink" title="std::list"></a>std::list</h1><p>简介：双向链表，大小可动态调整，用于频繁插入或删除。支持双向遍历。</p><p><strong>注：</strong></p><p>list同vector极其类似！！！！！</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;list&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 初始化</span></span><br><span class="line">    std::list&lt;<span class="type">int</span>&gt; list = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加元素</span></span><br><span class="line">    list.<span class="built_in">push_back</span>(<span class="number">5</span>);  <span class="comment">// 尾部插入</span></span><br><span class="line">    list.<span class="built_in">push_front</span>(<span class="number">0</span>); <span class="comment">// 头部插入</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除元素</span></span><br><span class="line">    list.<span class="built_in">pop_back</span>();  <span class="comment">// 删除尾部元素</span></span><br><span class="line">    list.<span class="built_in">pop_front</span>(); <span class="comment">// 删除头部元素</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍历元素</span></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Elements: &quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i : list) &#123;</span><br><span class="line">        std::cout &lt;&lt; i &lt;&lt; <span class="string">&quot; &quot;</span>; <span class="comment">// 输出: 1 2 3 4</span></span><br><span class="line">    &#125;</span><br><span class="line">    std::cout &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 访问元素</span></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;First element: &quot;</span> &lt;&lt; list.<span class="built_in">front</span>() &lt;&lt; std::endl; <span class="comment">// 输出: 1</span></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Last element: &quot;</span> &lt;&lt; list.<span class="built_in">back</span>() &lt;&lt; std::endl;   <span class="comment">// 输出: 4</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取大小</span></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Size: &quot;</span> &lt;&lt; list.<span class="built_in">size</span>() &lt;&lt; std::endl; <span class="comment">// 输出: 4</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-初始化"><a href="#1-初始化" class="headerlink" title="1.初始化"></a>1.初始化</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;list&gt;</span></span></span><br><span class="line"><span class="comment">// 默认初始化</span></span><br><span class="line">std::list&lt;<span class="type">int</span>&gt; list1;</span><br><span class="line"><span class="comment">// 初始化大小为 5，所有元素为 0</span></span><br><span class="line"><span class="function">std::list&lt;<span class="type">int</span>&gt; <span class="title">list2</span><span class="params">(<span class="number">5</span>)</span></span>;</span><br><span class="line"><span class="comment">// 初始化大小为 5，所有元素为 42</span></span><br><span class="line"><span class="function">std::list&lt;<span class="type">int</span>&gt; <span class="title">list3</span><span class="params">(<span class="number">5</span>, <span class="number">42</span>)</span></span>;</span><br><span class="line"><span class="comment">// 使用初始化列表</span></span><br><span class="line">std::list&lt;<span class="type">int</span>&gt; list4 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br></pre></td></tr></table></figure><h2 id="2-添加元素"><a href="#2-添加元素" class="headerlink" title="2.添加元素"></a>2.添加元素</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">list.<span class="built_in">push_back</span>(<span class="number">6</span>);  <span class="comment">// 在尾部插入元素 6</span></span><br><span class="line">list.<span class="built_in">push_front</span>(<span class="number">0</span>); <span class="comment">// 在头部插入元素 0</span></span><br><span class="line">list.<span class="built_in">insert</span>(it, <span class="number">10</span>); <span class="comment">// 在迭代器 it 指向的位置插入元素 10</span></span><br></pre></td></tr></table></figure><h2 id="3-删除元素"><a href="#3-删除元素" class="headerlink" title="3.删除元素"></a>3.删除元素</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">list.<span class="built_in">pop_back</span>();  <span class="comment">// 删除尾部元素</span></span><br><span class="line">list.<span class="built_in">pop_front</span>(); <span class="comment">// 删除头部元素</span></span><br><span class="line">list.<span class="built_in">erase</span>(it);   <span class="comment">// 删除迭代器 it 指向的元素</span></span><br><span class="line">list.<span class="built_in">clear</span>();     <span class="comment">// 清空所有元素</span></span><br></pre></td></tr></table></figure><h2 id="4-访问元素"><a href="#4-访问元素" class="headerlink" title="4.访问元素"></a>4.访问元素</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> first = list.<span class="built_in">front</span>(); <span class="comment">// 访问头部元素</span></span><br><span class="line"><span class="type">int</span> last = list.<span class="built_in">back</span>();   <span class="comment">// 访问尾部元素</span></span><br><span class="line"><span class="comment">//访问内部元素同 vector 类似！！！</span></span><br></pre></td></tr></table></figure><h2 id="5-获取大小"><a href="#5-获取大小" class="headerlink" title="5.获取大小"></a>5.获取大小</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">size_t</span> size = list.<span class="built_in">size</span>(); <span class="comment">// 获取元素数量</span></span><br><span class="line"><span class="type">bool</span> isEmpty = list.<span class="built_in">empty</span>(); <span class="comment">// 判断是否为空</span></span><br></pre></td></tr></table></figure><h2 id="6-遍历元素（范围-based-for-循环-使用迭代器）"><a href="#6-遍历元素（范围-based-for-循环-使用迭代器）" class="headerlink" title="6.遍历元素（范围-based for 循环&amp;使用迭代器）"></a>6.遍历元素（范围-based for 循环&amp;使用迭代器）</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用范围-based for 循环</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i : list) &#123;</span><br><span class="line">    std::cout &lt;&lt; i &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用迭代器</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> it = list.<span class="built_in">begin</span>(); it != list.<span class="built_in">end</span>(); ++it) &#123;</span><br><span class="line">    std::cout &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-排序和合并"><a href="#7-排序和合并" class="headerlink" title="7.排序和合并"></a>7.排序和合并</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">list.<span class="built_in">sort</span>(); <span class="comment">// 对链表进行排序</span></span><br><span class="line">list.<span class="built_in">merge</span>(otherList); <span class="comment">// 合并另一个链表</span></span><br></pre></td></tr></table></figure><h3 id="merge"><a href="#merge" class="headerlink" title="merge()"></a>merge()</h3><p><strong>语法：</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">merge</span><span class="params">(std::list&lt;T&gt;&amp; other)</span></span>;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">Compare</span>&gt;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">merge</span><span class="params">(std::list&lt;T&gt;&amp; other, Compare comp)</span></span>;</span><br></pre></td></tr></table></figure><ul><li><code>merge(other)</code>:<ul><li>直接合并 <code>other</code> 到当前 <code>std::list</code>，默认按 <strong>升序</strong> 合并，要求 <code>this</code> 和 <code>other</code> 都是 <strong>已排序的</strong>。</li><li><code>other</code> 变为空链表。</li></ul></li><li><code>merge(other, comp)</code>:<ul><li>允许使用 <strong>自定义比较函数</strong> <code>comp</code>（如降序或自定义排序方式）进行合并。</li></ul></li></ul><p><strong>1）合并两个已排序的链表</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;list&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::list&lt;<span class="type">int</span>&gt; list1 = &#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>&#125;;</span><br><span class="line">    std::list&lt;<span class="type">int</span>&gt; list2 = &#123;<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 合并 list2 到 list1</span></span><br><span class="line">    list<span class="number">1.</span><span class="built_in">merge</span>(list2);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输出合并后的 list1</span></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Merged list: &quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> num : list1) &#123;</span><br><span class="line">        std::cout &lt;&lt; num &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    std::cout &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输出 list2（应该为空）</span></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;List2 is now empty, size: &quot;</span> &lt;&lt; list<span class="number">2.</span><span class="built_in">size</span>() &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> <strong>输出</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Merged list: 1 2 3 4 5 6 7 8</span><br><span class="line">List2 is now empty, size: 0</span><br></pre></td></tr></table></figure><hr><p><strong>2）使用 <code>merge()</code> 进行降序合并</strong></p><p>如果两个链表是 <strong>降序排序的</strong>，你需要提供自定义的比较函数 <code>comp</code> 来确保合并后的顺序正确。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;list&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">descending</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a &gt; b;  <span class="comment">// 降序排列</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::list&lt;<span class="type">int</span>&gt; list1 = &#123;<span class="number">7</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">1</span>&#125;;</span><br><span class="line">    std::list&lt;<span class="type">int</span>&gt; list2 = &#123;<span class="number">8</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">2</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用自定义比较函数进行合并</span></span><br><span class="line">    list<span class="number">1.</span><span class="built_in">merge</span>(list2, descending);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输出合并后的 list1</span></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Merged list in descending order: &quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> num : list1) &#123;</span><br><span class="line">        std::cout &lt;&lt; num &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    std::cout &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>输出</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Merged list in descending order: 8 7 6 5 4 3 2 1</span><br></pre></td></tr></table></figure><p><strong>注意事项</strong></p><ol><li><p><strong><code>merge()</code> 只适用于已排序的 <code>std::list</code></strong></p><ul><li><p><strong>两个链表必须是已排序的</strong>，否则合并结果可能是错误的！</p></li><li><p>如果 <code>list1</code> 或 <code>list2</code> 不是有序的，先调用 <code>sort()</code> 进行排序：</p>  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">list<span class="number">1.</span><span class="built_in">sort</span>();</span><br><span class="line">list<span class="number">2.</span><span class="built_in">sort</span>();</span><br><span class="line">list<span class="number">1.</span><span class="built_in">merge</span>(list2);</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>合并后，<code>other</code> 变为空</strong></p><ul><li><code>merge()</code> <strong>不会创建新链表</strong>，而是直接修改 <code>this</code> 并清空 <code>other</code>，所以合并后 <code>other.size()</code> 变为 <code>0</code>。</li></ul></li><li><p><strong><code>merge()</code> 只适用于 <code>std::list</code></strong></p><ul><li>由于 <code>std::list</code> 采用的是 <strong>双向链表</strong>，其 <code>merge()</code> 操作是 O(N) 复杂度（线性时间）。</li><li><code>std::vector</code> **没有 <code>merge()</code>**，因为 <code>std::vector</code> 采用的是动态数组，不支持高效的合并。</li></ul></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;std-list&quot;&gt;&lt;a href=&quot;#std-list&quot; class=&quot;headerlink&quot; title=&quot;std::list&quot;&gt;&lt;/a&gt;std::list&lt;/h1&gt;&lt;p&gt;简介：双向链表，大小可动态调整，用于频繁插入或删除。支持双向遍历。&lt;/p&gt;
&lt;p&gt;&lt;st</summary>
      
    
    
    
    
    <category term="STL" scheme="https://www.ffcchhgg.cn/tags/STL/"/>
    
  </entry>
  
  <entry>
    <title>STLDay1</title>
    <link href="https://www.ffcchhgg.cn/2025/02/04/STLDay1/"/>
    <id>https://www.ffcchhgg.cn/2025/02/04/STLDay1/</id>
    <published>2025-02-04T03:33:20.000Z</published>
    <updated>2025-02-06T02:05:37.597Z</updated>
    
    <content type="html"><![CDATA[<h1 id="std-vector"><a href="#std-vector" class="headerlink" title="std::vector"></a>std::vector</h1><p>简介：是一个<strong>动态数组</strong>，提供高效的随机访问和动态扩容功能。<br>（内部使用连续的内存块存储元素，通过索引快速访问元素的时间复杂度为O(1)）<br>（会自动管理内存，当元素数量超过当前容量时，会自动分配更大的内存块并复制元素）<br>（支持迭代器，可方便地遍历容器中的元素）<br>（泛型编程，是一个模板类，可存储任意类型的元素，如int ,double, std::string 等）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 初始化</span></span><br><span class="line">    std::vector&lt;<span class="type">int</span>&gt; vec = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加元素</span></span><br><span class="line">    vec.<span class="built_in">push_back</span>(<span class="number">4</span>);</span><br><span class="line">    vec.<span class="built_in">insert</span>(vec.<span class="built_in">begin</span>() + <span class="number">2</span>, <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除元素</span></span><br><span class="line">    vec.<span class="built_in">pop_back</span>(); <span class="comment">//删除尾部元素</span></span><br><span class="line">    vec.<span class="built_in">erase</span>(vec.<span class="built_in">begin</span>() + <span class="number">1</span>); <span class="comment">//删除第二个元素</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 访问元素</span></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;First element: &quot;</span> &lt;&lt; vec.<span class="built_in">front</span>() &lt;&lt; std::endl;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Last element: &quot;</span> &lt;&lt; vec.<span class="built_in">back</span>() &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取大小和容量</span></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Size: &quot;</span> &lt;&lt; vec.<span class="built_in">size</span>() &lt;&lt; std::endl;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Capacity: &quot;</span> &lt;&lt; vec.<span class="built_in">capacity</span>() &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍历元素</span></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Elements: &quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i : vec) &#123;</span><br><span class="line">        std::cout &lt;&lt; i &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    std::cout &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="范围-based-for-循环"><a href="#范围-based-for-循环" class="headerlink" title="范围-based for 循环"></a>范围-based for 循环</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (元素类型 变量名 : 容器) &#123;</span><br><span class="line">    <span class="comment">// 使用变量名访问元素</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font color=red><strong>注：</strong></font> </p><ul><li>范围-based for 循环不仅适用于 std::vector，还适用于其他 STL 容器（如 std::list、std::map 等）以及数组。</li><li>代码块的结束必须在新的一行使用三个反引号，而且前后不能有多余的空格或其他字符，只需要简单地写 ‘ &#96;&#96;&#96; ’。</li><li>默认情况下，范围-based for 循环是只读的。如果需要修改容器中的元素，需要使用引用：</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span>&amp; i : vec) &#123;</span><br><span class="line">    i *= <span class="number">2</span>; <span class="comment">// 修改元素</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="vector-front-vector-back"><a href="#vector-front-vector-back" class="headerlink" title="vector.front()  &amp;  vector.back()"></a>vector.front()  &amp;  vector.back()</h2><blockquote><p>（成员函数）<strong>返回第一个 &#x2F; 最后一个元素</strong>的引用，使你能够访问和修改它。</p></blockquote><p><strong>语法：</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">reference <span class="title">front</span><span class="params">()</span></span>; <span class="comment">// reference back();</span></span><br><span class="line"><span class="function">const_reference <span class="title">front</span><span class="params">()</span> <span class="type">const</span></span>; <span class="comment">// const_reference back() const;</span></span><br></pre></td></tr></table></figure><ul><li><strong>返回类型</strong>：<ul><li>如果 <code>vec</code> 是非 <code>const</code> 容器，<code>front()</code> 返回对第一个元素的 <strong>引用</strong>，类型为 <code>reference</code>。</li><li>如果 <code>vec</code> 是 <code>const</code> 容器，<code>front()</code> 返回对第一个元素的 <strong>常量引用</strong>，类型为 <code>const_reference</code></li></ul></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::vector&lt;<span class="type">int</span>&gt; vec = &#123;<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 访问第一个元素</span></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;The first element is: &quot;</span> &lt;&lt; vec.<span class="built_in">front</span>() &lt;&lt; std::endl;  <span class="comment">// 输出: 10</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 修改第一个元素</span></span><br><span class="line">    vec.<span class="built_in">front</span>() = <span class="number">100</span>;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;After modification, the first element is: &quot;</span> &lt;&lt; vec.<span class="built_in">front</span>() &lt;&lt; std::endl;  <span class="comment">// 输出: 100</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>back()同理</em></p><h2 id="vector-push-back"><a href="#vector-push-back" class="headerlink" title="vector.push_back()"></a>vector.push_back()</h2><blockquote><p>（成员函数）将一个元素添加到容器末尾</p></blockquote><p><strong>语法：</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">push_back</span><span class="params">(<span class="type">const</span> T&amp; value)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">push_back</span><span class="params">(T&amp;&amp; value)</span></span>;</span><br></pre></td></tr></table></figure><ul><li><code>push_back(const T&amp; value)</code>：将一个值为 <code>value</code> 的元素添加到 <code>std::vector</code> 的末尾。<code>value</code> 是一个常量引用，可以是 <code>std::vector</code> 中存储的类型的任何对象。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//添加单个元素</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::vector&lt;<span class="type">int</span>&gt; vec = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;  <span class="comment">// 初始包含三个元素</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加一个元素 4 到 vec 的末尾</span></span><br><span class="line">    vec.<span class="built_in">push_back</span>(<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输出修改后的 vec</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i : vec) &#123;</span><br><span class="line">        std::cout &lt;&lt; i &lt;&lt; <span class="string">&quot; &quot;</span>;  <span class="comment">// 输出: 1 2 3 4</span></span><br><span class="line">    &#125;</span><br><span class="line">    std::cout &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>push_back(T&amp;&amp; value)</code>：通过右值引用将一个临时对象（或可移动对象）添加到容器末尾，这样可以避免不必要的拷贝，提高效率</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用右值引用优化</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::vector&lt;<span class="type">int</span>&gt; vec;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用右值引用插入临时对象</span></span><br><span class="line">    vec.<span class="built_in">push_back</span>(<span class="number">10</span>);  <span class="comment">// 这里的 10 是一个临时对象</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输出修改后的 vec</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i : vec) &#123;</span><br><span class="line">        std::cout &lt;&lt; i &lt;&lt; <span class="string">&quot; &quot;</span>;  <span class="comment">// 输出: 10</span></span><br><span class="line">    &#125;</span><br><span class="line">    std::cout &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//在这个例子中，10 是一个右值，调用 push_back 时，使用的是右值引用，因此元素 10 被直接移动到容器末尾，避免了不必要的拷贝。</span></span><br></pre></td></tr></table></figure><h2 id="vector-pop-back"><a href="#vector-pop-back" class="headerlink" title="vector.pop_back()"></a>vector.pop_back()</h2><blockquote><p>（成员函数）用于删除末尾元素</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::vector&lt;<span class="type">int</span>&gt; vec = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;;</span><br><span class="line">    <span class="comment">// 删除末尾的元素</span></span><br><span class="line">    vec.<span class="built_in">pop_back</span>();</span><br><span class="line">    <span class="comment">// 输出修改后的 vec</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i : vec) &#123;</span><br><span class="line">        std::cout &lt;&lt; i &lt;&lt; <span class="string">&quot; &quot;</span>;  <span class="comment">// 输出: 1 2 3</span></span><br><span class="line">    &#125;</span><br><span class="line">    std::cout &lt;&lt; std::endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="访问内部元素"><a href="#访问内部元素" class="headerlink" title="访问内部元素"></a>访问内部元素</h2><p><img src="/imgff/2.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iterator&gt;</span> <span class="comment">// 仅std::next()需要用到</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::vector&lt;<span class="type">int</span>&gt; vec = &#123;<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用下标索引访问</span></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Element at index 2: &quot;</span> &lt;&lt; vec[<span class="number">2</span>] &lt;&lt; std::endl;  <span class="comment">// 输出: 30</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用 at() 访问</span></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Element at index 2: &quot;</span> &lt;&lt; vec.<span class="built_in">at</span>(<span class="number">2</span>) &lt;&lt; std::endl;  <span class="comment">// 输出: 30</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用迭代器访问</span></span><br><span class="line">    std::vector&lt;<span class="type">int</span>&gt;::iterator it = vec.<span class="built_in">begin</span>() + <span class="number">2</span>;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Element at index 2: &quot;</span> &lt;&lt; *it &lt;&lt; std::endl;  <span class="comment">// 输出: 30</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 计算中间索引并访问</span></span><br><span class="line">    <span class="type">size_t</span> mid_index = vec.<span class="built_in">size</span>() / <span class="number">2</span>;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Middle element: &quot;</span> &lt;&lt; vec[mid_index] &lt;&lt; std::endl;  <span class="comment">// 输出: 30（偶数个元素时取中间偏右）</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 使用 std::next 获取中间元素的迭代器</span></span><br><span class="line">    <span class="keyword">auto</span> it = std::<span class="built_in">next</span>(vec.<span class="built_in">begin</span>(), vec.<span class="built_in">size</span>() / <span class="number">2</span>);</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Middle element: &quot;</span> &lt;&lt; *it &lt;&lt; std::endl;  <span class="comment">// 输出: 30</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="vector-insert"><a href="#vector-insert" class="headerlink" title="vector.insert"></a>vector.insert</h2><blockquote><p>（成员函数）用于在指定位置插入一个或多个元素，作用是将新元素插入到容器的指定位置，并将原有元素向后移动，以腾出空间。</p></blockquote><p><strong>语法：</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">iterator <span class="title">insert</span><span class="params">(iterator pos, <span class="type">const</span> T&amp; value)</span></span>;<span class="comment">//插入单个元素</span></span><br><span class="line"><span class="function">iterator <span class="title">insert</span><span class="params">(iterator pos, T&amp;&amp; value)</span></span>;</span><br><span class="line"><span class="function">iterator <span class="title">insert</span><span class="params">(iterator pos, size_type count, <span class="type">const</span> T&amp; value)</span></span>;<span class="comment">//插入多个相同的元素</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">InputIterator</span>&gt;</span><br><span class="line"><span class="function">iterator <span class="title">insert</span><span class="params">(iterator pos, InputIterator first, InputIterator last)</span></span>;<span class="comment">//插入一个范围的元素</span></span><br></pre></td></tr></table></figure><h3 id="1-insert-iterator-pos-const-T-value-插入单个元素"><a href="#1-insert-iterator-pos-const-T-value-插入单个元素" class="headerlink" title="1. insert(iterator pos, const T&amp; value)  插入单个元素"></a>1. <strong><code>insert(iterator pos, const T&amp; value)</code></strong>  插入单个元素</h3><ul><li>在指定位置 <code>pos</code> 插入单个元素 <code>value</code>。</li><li><code>pos</code> 是一个指向容器中某个位置的迭代器。</li><li>该方法返回一个迭代器，指向新插入的元素。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::vector&lt;<span class="type">int</span>&gt; vec = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在索引 2 处插入元素 10</span></span><br><span class="line">    <span class="keyword">auto</span> it = vec.<span class="built_in">insert</span>(vec.<span class="built_in">begin</span>() + <span class="number">2</span>, <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输出修改后的 vec</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i : vec) &#123;</span><br><span class="line">        std::cout &lt;&lt; i &lt;&lt; <span class="string">&quot; &quot;</span>;  <span class="comment">// 输出: 1 2 10 3 4</span></span><br><span class="line">    &#125;</span><br><span class="line">    std::cout &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输出新插入元素的值</span></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Inserted element: &quot;</span> &lt;&lt; *it &lt;&lt; std::endl;  <span class="comment">// 输出: 10</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-insert-iterator-pos-T-value"><a href="#2-insert-iterator-pos-T-value" class="headerlink" title="2. insert(iterator pos, T&amp;&amp; value)"></a>2. <strong><code>insert(iterator pos, T&amp;&amp; value)</code></strong></h3><ul><li>这个版本与第一个类似，但是它允许传递一个右值引用（<code>T&amp;&amp;</code>），适用于插入可以被移动的对象。</li></ul><h3 id="3-insert-iterator-pos-size-type-count-const-T-value-插入多个相同的元素"><a href="#3-insert-iterator-pos-size-type-count-const-T-value-插入多个相同的元素" class="headerlink" title="3. insert(iterator pos, size_type count, const T&amp; value)  插入多个相同的元素"></a>3. <strong><code>insert(iterator pos, size_type count, const T&amp; value)</code></strong>  插入多个相同的元素</h3><ul><li>在指定位置 <code>pos</code> 插入 <code>count</code> 个值为 <code>value</code> 的元素。</li><li>如果你希望插入多个相同的元素，可以使用这个版本。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::vector&lt;<span class="type">int</span>&gt; vec = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在索引 2 处插入 3 个值为 10 的元素</span></span><br><span class="line">    vec.<span class="built_in">insert</span>(vec.<span class="built_in">begin</span>() + <span class="number">2</span>, <span class="number">3</span>, <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输出修改后的 vec</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i : vec) &#123;</span><br><span class="line">        std::cout &lt;&lt; i &lt;&lt; <span class="string">&quot; &quot;</span>;  <span class="comment">// 输出: 1 2 10 10 10 3 4</span></span><br><span class="line">    &#125;</span><br><span class="line">    std::cout &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-insert-iterator-pos-InputIterator-first-InputIterator-last-插入一个范围的元素"><a href="#4-insert-iterator-pos-InputIterator-first-InputIterator-last-插入一个范围的元素" class="headerlink" title="4. insert(iterator pos, InputIterator first, InputIterator last)  插入一个范围的元素"></a>4. <strong><code>insert(iterator pos, InputIterator first, InputIterator last)</code>  插入一个范围的元素</strong></h3><ul><li>在指定位置 <code>pos</code> 插入一个范围 <code>[first, last)</code> 中的所有元素。</li><li>这可以用来将一个容器或其他可迭代范围的元素插入到当前容器中</li></ul><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::vector&lt;<span class="type">int</span>&gt; vec = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;;</span><br><span class="line">    std::vector&lt;<span class="type">int</span>&gt; new_elements = &#123;<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在索引 2 处插入 new_elements 的所有元素</span></span><br><span class="line">    vec.<span class="built_in">insert</span>(vec.<span class="built_in">begin</span>() + <span class="number">2</span>, new_elements.<span class="built_in">begin</span>(), new_elements.<span class="built_in">end</span>());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输出修改后的 vec</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i : vec) &#123;</span><br><span class="line">        std::cout &lt;&lt; i &lt;&lt; <span class="string">&quot; &quot;</span>;  <span class="comment">// 输出: 1 2 5 6 7 3 4</span></span><br><span class="line">    &#125;</span><br><span class="line">    std::cout &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注：</strong><br>&amp;<code>vec.begin()</code> 返回一个指向 <code>vec</code> 第一个元素的迭代器。通过 <code>+ 2</code> 操作，<code>vec.begin() + 2</code> 将返回一个指向容器中第 3 个元素的迭代器（因为迭代器是从 0 开始的）。换句话说，它指向了容器的第三个位置。<br>&amp;<code>*it</code> 是 <strong>解引用操作符</strong>，它用于访问迭代器 <code>it</code> 指向的元素。换句话说，<code>*it</code> 返回 <code>it</code> 所指向位置的值。</p><p><strong>注：</strong><br>返回值：<strong>返回迭代器，</strong><code>insert</code> 返回一个迭代器，指向新插入的元素（对于插入<strong>单个元素</strong>的情况）。如果插入了<strong>多个元素</strong>，则指向插入区域中的第一个元素。</p><h2 id="vec-erase"><a href="#vec-erase" class="headerlink" title="vec.erase"></a>vec.erase</h2><blockquote><p>（成员函数）用于删除容器中一个或多个元素</p></blockquote><p><strong>语法：</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">iterator <span class="title">erase</span><span class="params">(iterator position)</span></span>;</span><br><span class="line"><span class="function">iterator <span class="title">erase</span><span class="params">(iterator first, iterator last)</span></span>;</span><br></pre></td></tr></table></figure><h3 id="1-iterator-erase-iterator-position-："><a href="#1-iterator-erase-iterator-position-：" class="headerlink" title="1.iterator erase(iterator position)："></a>1.<code>iterator erase(iterator position)</code>：</h3><ul><li>删除容器中指定位置的单个元素。</li><li><code>position</code> 是一个指向要删除元素的迭代器。</li><li>返回值是指向删除元素后容器中下一个元素的迭代器。如果删除的是容器的最后一个元素，则返回 <code>vec.end()</code>。</li></ul><h3 id="2-iterator-erase-iterator-first-iterator-last-："><a href="#2-iterator-erase-iterator-first-iterator-last-：" class="headerlink" title="2.iterator erase(iterator first, iterator last)："></a>2.<code>iterator erase(iterator first, iterator last)</code>：</h3><ul><li>删除容器中从 <code>first</code> 到 <code>last</code> 之间的多个元素（<code>first</code> 包含，<code>last</code> 不包含）。</li><li><code>first</code> 和 <code>last</code> 是迭代器，分别指向要删除元素的起始位置和结束位置。</li><li>返回值是指向删除范围之后第一个元素的迭代器。如果删除的是容器的最后一部分，返回 <code>vec.end()</code>。</li></ul><h2 id="vector-size-vector-capacity"><a href="#vector-size-vector-capacity" class="headerlink" title="vector.size()&amp;vector.capacity()"></a>vector.size()&amp;vector.capacity()</h2><blockquote><p>（均为成员函数）size返回容器当前包含的<strong>元素个数</strong>（容器的大小）；capacity返回容器能够容纳的元素的总容量（已经分配的内存空间中可以存储的元素数量，不是当前实际的元素数量）</p></blockquote><p><code>std::vector</code> 是一个动态数组，当元素数量超过当前容量时，它会自动扩容。扩容的过程包括：</p><ol><li>分配一块更大的内存（通常是当前容量的 <strong>2 倍</strong>）。</li><li>将原有元素复制到新内存中。</li><li>释放旧内存。<br><img src="/imgff/1.png"></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;std-vector&quot;&gt;&lt;a href=&quot;#std-vector&quot; class=&quot;headerlink&quot; title=&quot;std::vector&quot;&gt;&lt;/a&gt;std::vector&lt;/h1&gt;&lt;p&gt;简介：是一个&lt;strong&gt;动态数组&lt;/strong&gt;，提供高效的随机访</summary>
      
    
    
    
    
    <category term="STL" scheme="https://www.ffcchhgg.cn/tags/STL/"/>
    
  </entry>
  
  <entry>
    <title>使用gdb调试代码</title>
    <link href="https://www.ffcchhgg.cn/2025/01/27/%E4%BD%BF%E7%94%A8gdb%E8%B0%83%E8%AF%95%E4%BB%A3%E7%A0%81/"/>
    <id>https://www.ffcchhgg.cn/2025/01/27/%E4%BD%BF%E7%94%A8gdb%E8%B0%83%E8%AF%95%E4%BB%A3%E7%A0%81/</id>
    <published>2025-01-27T09:33:10.000Z</published>
    <updated>2025-01-30T03:58:06.988Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>首先加入调试信息：<code>g++ -g -o pp pp.cpp</code></p></li><li><p>启动gdb</p><p>1)在文件内部的终端内输入  <code>gdb</code></p><p>2)或者在win+R+回车后找到文件所在目录 (或者在Git Bash中)并输入    <code>gdb ./文件名</code></p></li><li><p>设置断点</p><p>1)在某一行设置断点：    <font color=red><strong><code>(gdb) break 15</code></strong></font>       <em>在第 15 行设置断点</em></p><p>2)在函数入口设置断点：    <code>(gdb) break my_function</code>     <em>在函数 my_function 的入口设置断点</em></p></li><li><p>在gdb中启动程序：</p><p>1)代码无参数： <code>(gdb) run</code>  </p><p>2)代码有参数： <code>(gdb) run  avg1 avg2…</code>（只需要在run后面增加参数的值即可）</p></li><li><p>执行代码</p><p>1)<code>(gdb)next</code>:  单步执行，跳过函数调用</p><p>2)<code>(gdb)step</code>:   单步执行，进入函数</p><p>3)<code>(gdb)continue</code>:  继续执行直到下一个断点</p></li><li><p>查看变量的值：<code>(gdb)print &lt;变量名&gt;</code></p></li><li><p>查看当前调用栈：<code>(gdb)backtrace</code> 或 <code>(gdb)bt</code></p></li><li><p>修改变量的值：<code>(gdb)set &lt;variable_name&gt; = &lt;new_value&gt;</code></p></li><li><p>退出 GDB：<code>(gdb)quit</code></p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;ol&gt;
&lt;li&gt;&lt;p&gt;首先加入调试信息：&lt;code&gt;g++ -g -o pp pp.cpp&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;启动gdb&lt;/p&gt;
&lt;p&gt;1)在文件内部的终端内输入  &lt;code&gt;gdb&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;2)或者在win+R+回车后找到文</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>another try</title>
    <link href="https://www.ffcchhgg.cn/2024/12/28/another-try/"/>
    <id>https://www.ffcchhgg.cn/2024/12/28/another-try/</id>
    <published>2024-12-28T02:32:26.191Z</published>
    <updated>2025-02-27T12:20:39.558Z</updated>
    
    <content type="html"><![CDATA[<h2 id="文章正文内容…"><a href="#文章正文内容…" class="headerlink" title="文章正文内容…"></a>文章正文内容…</h2><h1 id="记录我的开始"><a href="#记录我的开始" class="headerlink" title="记录我的开始"></a>记录我的开始</h1><h2 id="Betelgeuse"><a href="#Betelgeuse" class="headerlink" title="Betelgeuse"></a>Betelgeuse</h2><p><img src="https://5b0988e595225.cdn.sohucs.com/images/20191129/7afb5e4750c74803adb1494631e1e97d.gif" alt="开心呀"></p><p>虽然我学习新的东西很慢，但是当我克服各种困难（虽然偶尔只是误打误撞做对了某些步骤）时，我内心其实也是十分激动的，这是我<strong>技术博客的开始</strong>，虽然还有大工程没有建好 *(metlify一直注册不了，想ku，呜呜呜)*，但是已经<strong>初见雏形</strong>了，过程中更多的是好奇，做出来也是很兴奋（两点肝完，三点睡着），希望未来几年或十几年都能<font color=red><strong>坚持</strong></font>下来吧，<mark><strong>加油加油，你是最棒哒！！</strong><mark><br><img src="https://ts1.cn.mm.bing.net/th/id/R-C.624ca71e95353d938d0fe22e9e6ca57b?rik=TPo6jiNZUDMflA&riu=http://img.soogif.com/BmdwKEAuS7Y32eR9WKeNRzLJyWKpMU7T.gif&ehk=uGtwEZjWXjxH9cWHIRdztyOZ5Knf4LTZ2IAnjYMsOZI=&risl=&pid=ImgRaw&r=0"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;文章正文内容…&quot;&gt;&lt;a href=&quot;#文章正文内容…&quot; class=&quot;headerlink&quot; title=&quot;文章正文内容…&quot;&gt;&lt;/a&gt;文章正文内容…&lt;/h2&gt;&lt;h1 id=&quot;记录我的开始&quot;&gt;&lt;a href=&quot;#记录我的开始&quot; class=&quot;headerlink&quot; </summary>
      
    
    
    
    <category term="Daily" scheme="https://www.ffcchhgg.cn/categories/Daily/"/>
    
    
    <category term="Daily" scheme="https://www.ffcchhgg.cn/tags/Daily/"/>
    
  </entry>
  
  <entry>
    <title>b</title>
    <link href="https://www.ffcchhgg.cn/2024/12/28/b/"/>
    <id>https://www.ffcchhgg.cn/2024/12/28/b/</id>
    <published>2024-12-27T17:48:31.000Z</published>
    <updated>2024-12-30T05:38:24.033Z</updated>
    
    <content type="html"><![CDATA[<h2 id="好困啊"><a href="#好困啊" class="headerlink" title="好困啊"></a>好困啊</h2><h1 id="明天要开始复习考试内容啦！！！"><a href="#明天要开始复习考试内容啦！！！" class="headerlink" title="明天要开始复习考试内容啦！！！"></a>明天要开始复习考试内容啦！！！</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">加油，你是最棒的！！！</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;好困啊&quot;&gt;&lt;a href=&quot;#好困啊&quot; class=&quot;headerlink&quot; title=&quot;好困啊&quot;&gt;&lt;/a&gt;好困啊&lt;/h2&gt;&lt;h1 id=&quot;明天要开始复习考试内容啦！！！&quot;&gt;&lt;a href=&quot;#明天要开始复习考试内容啦！！！&quot; class=&quot;headerlink</summary>
      
    
    
    
    
    <category term="Daily" scheme="https://www.ffcchhgg.cn/tags/Daily/"/>
    
  </entry>
  
  <entry>
    <title>a</title>
    <link href="https://www.ffcchhgg.cn/2024/12/28/a/"/>
    <id>https://www.ffcchhgg.cn/2024/12/28/a/</id>
    <published>2024-12-27T17:10:13.000Z</published>
    <updated>2025-02-06T02:51:01.870Z</updated>
    
    <content type="html"><![CDATA[<h2 id="哇哦"><a href="#哇哦" class="headerlink" title="哇哦"></a>哇哦</h2><h3 id="这是王若璠的小小探索"><a href="#这是王若璠的小小探索" class="headerlink" title="这是王若璠的小小探索"></a>这是王若璠的小小探索</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">* 自己鼓捣了一天的成果 *</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;哇哦&quot;&gt;&lt;a href=&quot;#哇哦&quot; class=&quot;headerlink&quot; title=&quot;哇哦&quot;&gt;&lt;/a&gt;哇哦&lt;/h2&gt;&lt;h3 id=&quot;这是王若璠的小小探索&quot;&gt;&lt;a href=&quot;#这是王若璠的小小探索&quot; class=&quot;headerlink&quot; title=&quot;这是王若璠</summary>
      
    
    
    
    
    <category term="Daily" scheme="https://www.ffcchhgg.cn/tags/Daily/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://www.ffcchhgg.cn/2024/12/27/hello-world/"/>
    <id>https://www.ffcchhgg.cn/2024/12/27/hello-world/</id>
    <published>2024-12-27T12:16:12.461Z</published>
    <updated>2024-12-27T12:16:12.461Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
